-- Trigger Monitor Module (Otimizado para Performance)
-- Monitors spawn triggers for different game areas

local TriggerMonitor = {}
TriggerMonitor.__index = TriggerMonitor

-- Cached services and functions for performance
local osTime = os.time
local mathFloor = math.floor
local stringFormat = string.format
local tableInsert = table.insert
local tableSort = table.sort
local tableConcat = table.concat

-- Configuration constants (cached references)
local CONFIG = {
    TRIGGERS = {
        FOLDER_PATH = {"Workspace", "MonsterSpawns", "Triggers"},
        NAMES = {
            CryptOfKings = "CryptTrigger",
            LowerSunken = "evileye1",
            DeepSunken = "evileye2",
            CastleRock = "BoundShrieker4",
            TempleOfFire = "MazeSnakes"
        },
        PRIORITY = {
            CastleRock = 5, -- Deepest/most valuable
            DeepSunken = 4,
            TempleOfFire = 3,
            LowerSunken = 2,
            CryptOfKings = 1
        }
    }
}

-- Pre-computed display names cache
local DISPLAY_NAMES = {}
for labelName in pairs(CONFIG.TRIGGERS.NAMES) do
    DISPLAY_NAMES[labelName] = labelName:gsub('([A-Z])', ' %1'):gsub('^ ', '')
end

-- Pre-computed priorities cache
local PRIORITIES = CONFIG.TRIGGERS.PRIORITY

function TriggerMonitor.new(connectionManager)
    local self = setmetatable({}, TriggerMonitor)
    self.connMgr = connectionManager
    self.triggerTimestamps = {
        CryptOfKings = 0,
        LowerSunken = 0,
        DeepSunken = 0,
        CastleRock = 0,
        TempleOfFire = 0
    }
    self.triggersLabel = nil
    self.isConnected = false
    
    -- Performance optimization: Cache for label text and timestamps
    self._cachedLabelText = ""
    self._lastLabelUpdateTime = 0
    self._labelUpdateInterval = 2.0 -- Update every 2 seconds for better performance
    
    -- Pre-allocated reusable table for sorting
    self._triggerListBuffer = {}
    for i = 1, 5 do
        self._triggerListBuffer[i] = {
            name = "",
            ts = 0,
            displayName = "",
            depth = 0,
            score = 0
        }
    end
    
    return self
end

-- Optimized timestamp formatting with caching
local timestampCache = {}
local lastCacheCleanup = 0

function TriggerMonitor:formatPrettyTimestamp(ts)
    if ts == 0 then return 'Never' end
    
    local currentTime = osTime()
    local delta = currentTime - ts
    
    -- Cache cleanup every 30 seconds to prevent memory bloat
    if currentTime - lastCacheCleanup > 30 then
        timestampCache = {}
        lastCacheCleanup = currentTime
    end
    
    -- Check cache first
    local cacheKey = ts
    if timestampCache[cacheKey] and (currentTime - timestampCache[cacheKey].time) < 1 then
        return timestampCache[cacheKey].result
    end
    
    local result
    if delta < 2 then
        result = 'Now'
    elseif delta < 60 then
        result = stringFormat('%ds ago', delta)
    elseif delta < 3600 then
        local m = mathFloor(delta/60)
        local s = delta % 60
        result = stringFormat('%dm %ds ago', m, s)
    else
        local h = mathFloor(delta/3600)
        local m = mathFloor((delta%3600)/60)
        result = stringFormat('%dh %dm ago', h, m)
    end
    
    -- Cache the result
    timestampCache[cacheKey] = {result = result, time = currentTime}
    return result
end

-- Heavily optimized label text generation
function TriggerMonitor:getTriggersLabelText()
    local now = osTime()
    
    -- Use pre-allocated buffer to avoid table creation overhead
    local triggerList = self._triggerListBuffer
    local idx = 1
    
    -- Fill buffer with current data
    for labelName, partName in pairs(CONFIG.TRIGGERS.NAMES) do
        local ts = self.triggerTimestamps[labelName] or 0
        local depth = PRIORITIES[labelName] or 0
        local timeSince = (ts > 0) and (now - ts) or 999999
        local score = (depth * 50) + timeSince
        
        local entry = triggerList[idx]
        entry.name = labelName
        entry.ts = ts
        entry.displayName = DISPLAY_NAMES[labelName]
        entry.depth = depth
        entry.score = score
        
        idx = idx + 1
    end
    
    -- Sort for display: most recent first, then deeper
    tableSort(triggerList, function(a, b)
        if a.ts == b.ts then
            return a.depth > b.depth
        else
            return a.ts > b.ts
        end
    end)
    
    -- Find best trigger with single pass
    local bestScore = -math.huge
    local bestIdx = 1
    for i = 1, 5 do
        local trig = triggerList[i]
        if trig.score > bestScore then
            bestScore = trig.score
            bestIdx = i
        end
    end
    
    -- Build the label string with pre-allocated lines table
    local lines = {
        'Triggers (Best = Deepest & Longest Unspawned):',
        ''
    }
    
    for i = 1, 5 do
        local trig = triggerList[i]
        local pretty = self:formatPrettyTimestamp(trig.ts)
        local paddedName = stringFormat('%-20s', trig.displayName)
        local indicator = (i == bestIdx) and ' ⭐' or ''
        lines[i + 2] = stringFormat('• %s %s%s', paddedName, pretty, indicator)
    end
    
    return tableConcat(lines, '\n')
end

-- Throttled label update to reduce UI calls
function TriggerMonitor:updateTriggersLabel()
    if not self.triggersLabel then return end
    
    local now = osTime()
    if now - self._lastLabelUpdateTime >= self._labelUpdateInterval then
        local newText = self:getTriggersLabelText()
        if newText ~= self._cachedLabelText then
            self.triggersLabel:SetText(newText)
            self._cachedLabelText = newText
        end
        self._lastLabelUpdateTime = now
    end
end

-- Manual trigger update with immediate UI refresh
function TriggerMonitor:updateTriggerTimestamp(triggerName)
    if self.triggerTimestamps[triggerName] then
        self.triggerTimestamps[triggerName] = osTime()
        -- Force immediate update for manual triggers
        self._lastLabelUpdateTime = 0
        self:updateTriggersLabel()
    end
end

-- Cached folder lookup
local folderCache = {}

function TriggerMonitor:getFolderByPath(pathArray)
    local pathKey = tableConcat(pathArray, ".")
    if folderCache[pathKey] then
        return folderCache[pathKey]
    end
    
    local obj = game
    for _, name in ipairs(pathArray) do
        obj = obj:FindFirstChild(name)
        if not obj then return nil end
    end
    
    folderCache[pathKey] = obj
    return obj
end

-- Optimized connection setup
function TriggerMonitor:connectTriggerListeners()
    if self.isConnected then return end
    
    local triggersFolder = self:getFolderByPath(CONFIG.TRIGGERS.FOLDER_PATH)
    if not triggersFolder then
        warn("[TriggerMonitor] Folder not found: " .. tableConcat(CONFIG.TRIGGERS.FOLDER_PATH, "."))
        return
    end

    -- Batch connection setup to reduce overhead
    for labelName, partName in pairs(CONFIG.TRIGGERS.NAMES) do
        local part = triggersFolder:FindFirstChild(partName)
        if part and part:FindFirstChild("LastSpawned") then
            local lastSpawned = part.LastSpawned
            
            -- Use closure to avoid creating new functions in the loop
            local function onValueChanged()
                self.triggerTimestamps[labelName] = lastSpawned.Value
                self:updateTriggersLabel()
            end
            
            self.connMgr:add(lastSpawned:GetPropertyChangedSignal("Value"):Connect(onValueChanged))
            
            -- Initialize existing values
            if lastSpawned.Value > 0 then
                self.triggerTimestamps[labelName] = lastSpawned.Value
            end
        end
    end
    
    self.isConnected = true
    self:updateTriggersLabel()
end

-- Set UI label reference
function TriggerMonitor:setLabel(label)
    self.triggersLabel = label
    if label then
        self:updateTriggersLabel()
    end
end

-- Optimized periodic update with reduced frequency
function TriggerMonitor:startPeriodicUpdate()
    local RunService = game:GetService('RunService')
    
    -- Use Heartbeat instead of RenderStepped for better performance
    -- RenderStepped runs at framerate, Heartbeat runs at 60Hz max
    self._periodicConnection = RunService.Heartbeat:Connect(function()
        self:updateTriggersLabel()
    end)
    self.connMgr:add(self._periodicConnection)
end

-- Stop periodic updates to save performance
function TriggerMonitor:stopPeriodicUpdate()
    if self._periodicConnection then
        self._periodicConnection:Disconnect()
        self._periodicConnection = nil
    end
end

-- Enable/disable the monitor completely
function TriggerMonitor:setEnabled(enabled)
    if enabled then
        if not self._periodicConnection then
            self:startPeriodicUpdate()
        end
    else
        self:stopPeriodicUpdate()
    end
end

-- Simple getters (no optimization needed)
function TriggerMonitor:getTriggerTimestamps()
    return self.triggerTimestamps
end

function TriggerMonitor:getConfig()
    return CONFIG.TRIGGERS
end

-- Cleanup with cache clearing
function TriggerMonitor:destroy()
    self.triggersLabel = nil
    self.isConnected = false
    self._cachedLabelText = ""
    self._triggerListBuffer = nil
    -- Clear timestamp cache
    timestampCache = {}
end

return TriggerMonitor
