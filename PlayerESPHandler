-- PlayerESPHandler.lua - OTIMIZADO
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Carrega o módulo Utils
local Utils = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/refs/heads/main/Utils"))()
local utils = Utils.new()

local function getBestAdornee(character)
    return character:FindFirstChild("Head")
        or character:FindFirstChild("UpperTorso")
        or character:FindFirstChild("Torso")
        or character:FindFirstChildWhichIsA("BasePart")
end

local PlayerESP = {}
PlayerESP.__index = PlayerESP

PlayerESP.defaultTextSize = 14
PlayerESP.defaultTextColor = Color3.new(1,1,1)

-- Store display config (default: all true)
PlayerESP.displayConfig = {
    showPlayerName = true,
    showRogueName = true,
    showEdict = true,
    showHealth = true,
    showHealthPercent = true
}

local ConnectionManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/main/ConnectionManager"))()

function PlayerESP.new()
    local self = setmetatable({}, PlayerESP)
    self.enabled = false
    self._connMgr = ConnectionManager.new()
    self._playerConnMgrs = {} -- [player] = ConnectionManager
    self.espBillboards = {}
    self.dataCache = {}
    return self
end

function PlayerESP:createBillboard(player)
    local character = player.Character
    if not character or character:FindFirstChild("PlayerESP") then
        return
    end

    local adornee = getBestAdornee(character)
    if not adornee then
        return
    end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlayerESP"
    billboard.LightInfluence = 1
    billboard.Active = true
    billboard.Adornee = adornee
    billboard.ClipsDescendants = true
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 500, 0, 100)
    billboard.Parent = adornee

    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 3)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = billboard

    local nameLabel = Instance.new("TextLabel")
    nameLabel.FontSize = Enum.FontSize.Size14
    nameLabel.TextColor3 = Color3.new(1,1,1)
    nameLabel.BorderColor3 = Color3.new(0,0,0)
    nameLabel.Text = "[" .. player.Name .. "]"
    nameLabel.TextStrokeTransparency = 0.5
    nameLabel.Font = Enum.Font.SourceSansSemibold
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextSize = 14
    nameLabel.Size = UDim2.new(1,0,0.1,0)
    nameLabel.BorderSizePixel = 0
    nameLabel.BackgroundColor3 = Color3.new(1,1,1)
    nameLabel.Parent = billboard

    local infoFrame = Instance.new("Frame")
    infoFrame.BackgroundTransparency = 1
    infoFrame.BorderColor3 = Color3.new(0,0,0)
    infoFrame.Size = UDim2.new(1,0,0.1,0)
    infoFrame.BorderSizePixel = 0
    infoFrame.BackgroundColor3 = Color3.new(1,1,1)
    infoFrame.Parent = billboard

    local infoLayout = Instance.new("UIListLayout")
    infoLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    infoLayout.FillDirection = Enum.FillDirection.Horizontal
    infoLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    infoLayout.SortOrder = Enum.SortOrder.LayoutOrder
    infoLayout.Parent = infoFrame

    local rogueLabel = Instance.new("TextLabel")
    rogueLabel.FontSize = Enum.FontSize.Size14
    rogueLabel.TextColor3 = Color3.new(1,1,1)
    rogueLabel.BorderColor3 = Color3.new(0,0,0)
    rogueLabel.Text = "[Lord Abadon Terrified]"
    rogueLabel.TextStrokeTransparency = 0.5
    rogueLabel.AutomaticSize = Enum.AutomaticSize.X
    rogueLabel.Font = Enum.Font.SourceSansSemibold
    rogueLabel.BackgroundTransparency = 1
    rogueLabel.TextSize = 14
    rogueLabel.Size = UDim2.new(0,0,0.1,0)
    rogueLabel.BorderSizePixel = 0
    rogueLabel.BackgroundColor3 = Color3.new(1,1,1)
    rogueLabel.Parent = infoFrame

    local edictLabel = Instance.new("TextLabel")
    edictLabel.FontSize = Enum.FontSize.Size14
    edictLabel.TextColor3 = Color3.new(1,1,1)
    edictLabel.BorderColor3 = Color3.new(0,0,0)
    edictLabel.Text = "[Healer]"
    edictLabel.TextStrokeTransparency = 0.5
    edictLabel.Font = Enum.Font.SourceSansSemibold
    edictLabel.BackgroundTransparency = 1
    edictLabel.AutomaticSize = Enum.AutomaticSize.X
    edictLabel.TextSize = 14
    edictLabel.Size = UDim2.new(0,0,0.1,0)
    edictLabel.BorderSizePixel = 0
    edictLabel.BackgroundColor3 = Color3.new(1,1,1)
    edictLabel.Parent = infoFrame

    local hpFrame = Instance.new("Frame")
    hpFrame.BackgroundTransparency = 1
    hpFrame.BorderColor3 = Color3.new(0,0,0)
    hpFrame.Size = UDim2.new(1,0,0.1,0)
    hpFrame.BorderSizePixel = 0
    hpFrame.BackgroundColor3 = Color3.new(1,1,1)
    hpFrame.Parent = billboard

    local hpLayout = Instance.new("UIListLayout")
    hpLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    hpLayout.FillDirection = Enum.FillDirection.Horizontal
    hpLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    hpLayout.SortOrder = Enum.SortOrder.LayoutOrder
    hpLayout.Parent = hpFrame

    local hpLabel = Instance.new("TextLabel")
    hpLabel.FontSize = Enum.FontSize.Size14
    hpLabel.TextColor3 = Color3.new(1,1,1)
    hpLabel.BorderColor3 = Color3.new(0,0,0)
    hpLabel.Text = "[100/100]"
    hpLabel.TextStrokeTransparency = 0.5
    hpLabel.Font = Enum.Font.SourceSansSemibold
    hpLabel.BackgroundTransparency = 1
    hpLabel.AutomaticSize = Enum.AutomaticSize.X
    hpLabel.TextSize = 14
    hpLabel.Size = UDim2.new(0,0,0.1,0)
    hpLabel.BorderSizePixel = 0
    hpLabel.BackgroundColor3 = Color3.new(1,1,1)
    hpLabel.Parent = hpFrame

    local hpPercLabel = Instance.new("TextLabel")
    hpPercLabel.FontSize = Enum.FontSize.Size14
    hpPercLabel.TextColor3 = Color3.new(1,1,1)
    hpPercLabel.BorderColor3 = Color3.new(0,0,0)
    hpPercLabel.Text = "[100%]"
    hpPercLabel.TextStrokeTransparency = 0.5
    hpPercLabel.Font = Enum.Font.SourceSansSemibold
    hpPercLabel.BackgroundTransparency = 1
    hpPercLabel.AutomaticSize = Enum.AutomaticSize.X
    hpPercLabel.TextSize = 14
    hpPercLabel.Size = UDim2.new(0,0,0.1,0)
    hpPercLabel.BorderSizePixel = 0
    hpPercLabel.BackgroundColor3 = Color3.new(1,1,1)
    hpPercLabel.Parent = hpFrame

    self.espBillboards[player] = {
        billboard = billboard,
        nameLabel = nameLabel,
        rogueLabel = rogueLabel,
        edictLabel = edictLabel,
        hpLabel = hpLabel,
        hpPercLabel = hpPercLabel,
        infoFrame = infoFrame,
        hpFrame = hpFrame
    }
    
    -- OTIMIZAÇÃO: Inicializar cache de dados para o player
    self.dataCache[player] = {
        lastUpdate = 0,
        rogueName = "",
        edict = "",
        healthDisplay = "",
        healthPercentDisplay = ""
    }
    
    -- Apply display config to this billboard
    self:setDisplayConfig(self.displayConfig)
    
    -- OTIMIZAÇÃO: Atualizar dados iniciais imediatamente
    self:updatePlayerData(player)
end

function PlayerESP:removeBillboard(player)
    local data = self.espBillboards[player]
    if data and data.billboard then
        data.billboard:Destroy()
        self.espBillboards[player] = nil
    end
    if self.dataCache[player] then
        self.dataCache[player] = nil
    end
    if self._playerConnMgrs[player] then
        self._playerConnMgrs[player]:disconnectAll()
        self._playerConnMgrs[player] = nil
    end
end

-- OTIMIZAÇÃO CRÍTICA: Função para atualizar dados de um player específico
function PlayerESP:updatePlayerData(player)
    if not player or not player.Parent then return end
    
    local cache = self.dataCache[player]
    if not cache then return end
    
    local currentTime = tick()
    
    -- OTIMIZAÇÃO: Cache com timeout de 1 segundo (ao invés de calcular a cada frame)
    if currentTime - cache.lastUpdate < 1 then
        return -- Usar dados em cache
    end
    
    -- Atualizar cache
    cache.rogueName = utils:getPlayerRogueDisplay(player)
    cache.edict = utils:getPlayerEdictDisplay(player)
    cache.healthDisplay, cache.healthPercentDisplay = utils:getPlayerHealthDisplay(player)
    cache.lastUpdate = currentTime
    
    -- Atualizar UI apenas se os dados mudaram
    local data = self.espBillboards[player]
    if data then
        data.nameLabel.Text = "[" .. player.Name .. "]"
        data.rogueLabel.Text = "[" .. cache.rogueName .. "]"
        data.edictLabel.Text = "[" .. cache.edict .. "]"
        data.hpLabel.Text = "[" .. cache.healthDisplay .. "]"
        data.hpPercLabel.Text = "[" .. cache.healthPercentDisplay .. "]"
    end
end

-- OTIMIZAÇÃO CRÍTICA: Refatoração completa da função de atualização
function PlayerESP:updateBillboards()
    -- OTIMIZAÇÃO: Throttling mais agressivo - atualizar apenas a cada 0.5s (2 FPS)
    self._lastUpdate = self._lastUpdate or 0
    if tick() - self._lastUpdate < 0.5 then return end
    self._lastUpdate = tick()
    
    -- OTIMIZAÇÃO: Iterar apenas sobre players que já têm billboards
    for player, data in pairs(self.espBillboards) do
        if player and player.Parent and player.Character then
            self:updatePlayerData(player)
        else
            -- CORREÇÃO: Remover billboard se player não é mais válido
            self:removeBillboard(player)
        end
    end
end

-- CORREÇÃO CRÍTICA: Função de conexão de player com limpeza adequada
function PlayerESP:connectPlayer(player)
    if player == Players.LocalPlayer then return end
    if self._playerConnMgrs[player] then
        self._playerConnMgrs[player]:disconnectAll()
    end
    self._playerConnMgrs[player] = ConnectionManager.new()
    local mgr = self._playerConnMgrs[player]
    mgr:add(player.CharacterAdded:Connect(function(character)
        if self.enabled then
            task.wait(0.1)
            self:createBillboard(player)
        end
    end))
    mgr:add(player.CharacterRemoving:Connect(function(character)
        self:removeBillboard(player)
    end))
    if player.Character then
        self:createBillboard(player)
    end
end

function PlayerESP:enable()
    self.enabled = true
    self:cleanup()
    for _, player in ipairs(Players:GetPlayers()) do
        self:connectPlayer(player)
    end
    self._connMgr:add(Players.PlayerAdded:Connect(function(player)
        self:connectPlayer(player)
    end))
    self._connMgr:add(Players.PlayerRemoving:Connect(function(player)
        self:removeBillboard(player)
        if self._playerConnMgrs[player] then
            self._playerConnMgrs[player]:disconnectAll()
            self._playerConnMgrs[player] = nil
        end
    end))
    self._connMgr:add(RunService.Heartbeat:Connect(function()
        self:updateBillboards()
    end))
end

function PlayerESP:disable()
    self.enabled = false
    self:cleanup()
end

-- CORREÇÃO CRÍTICA: Limpeza completa melhorada
function PlayerESP:cleanup()
    self._connMgr:disconnectAll()
    for _, mgr in pairs(self._playerConnMgrs) do
        mgr:disconnectAll()
    end
    self._playerConnMgrs = {}
    for player, _ in pairs(self.espBillboards) do
        self:removeBillboard(player)
    end
    self.dataCache = {}
end

function PlayerESP:setTextSize(size)
    self.defaultTextSize = size
    for _, data in pairs(self.espBillboards) do
        if data.nameLabel then data.nameLabel.TextSize = size end
        if data.rogueLabel then data.rogueLabel.TextSize = size end
        if data.edictLabel then data.edictLabel.TextSize = size end
        if data.hpLabel then data.hpLabel.TextSize = size end
        if data.hpPercLabel then data.hpPercLabel.TextSize = size end
    end
end

function PlayerESP:setTextColor(color)
    self.defaultTextColor = color
    for _, data in pairs(self.espBillboards) do
        if data.nameLabel then data.nameLabel.TextColor3 = color end
        if data.rogueLabel then data.rogueLabel.TextColor3 = color end
        if data.edictLabel then data.edictLabel.TextColor3 = color end
        if data.hpLabel then data.hpLabel.TextColor3 = color end
        if data.hpPercLabel then data.hpPercLabel.TextColor3 = color end
    end
end

-- Method to update display config from outside
function PlayerESP:setDisplayConfig(config)
    self.displayConfig = config or self.displayConfig
    for _, data in pairs(self.espBillboards) do
        -- Remove all children from infoFrame and hpFrame except the layout
        if data.infoFrame then
            for _, child in ipairs(data.infoFrame:GetChildren()) do
                if not child:IsA("UIListLayout") then
                    child.Parent = nil
                end
            end
        end
        if data.hpFrame then
            for _, child in ipairs(data.hpFrame:GetChildren()) do
                if not child:IsA("UIListLayout") then
                    child.Parent = nil
                end
            end
        end
        -- Remove all children from billboard except UIListLayout
        if data.billboard then
            for _, child in ipairs(data.billboard:GetChildren()) do
                if not child:IsA("UIListLayout") then
                    child.Parent = nil
                end
            end
        end
        -- Set LayoutOrder explicitly
        if data.nameLabel then
            data.nameLabel.LayoutOrder = 1
        end
        if data.infoFrame then
            data.infoFrame.LayoutOrder = 2
        end
        if data.hpFrame then
            data.hpFrame.LayoutOrder = 3
        end
        -- Add back in the correct visual order:
        if data.nameLabel and self.displayConfig.showPlayerName ~= false then
            data.nameLabel.Parent = data.billboard
        end
        if data.infoFrame then
            data.infoFrame.Parent = data.billboard
        end
        if data.hpFrame then
            data.hpFrame.Parent = data.billboard
        end
        -- 2. Rogue Name (infoFrame)
        if data.infoFrame and data.rogueLabel and self.displayConfig.showRogueName ~= false then
            data.rogueLabel.Parent = data.infoFrame
        end
        -- 3. Edict (infoFrame)
        if data.infoFrame and data.edictLabel and self.displayConfig.showEdict ~= false then
            data.edictLabel.Parent = data.infoFrame
        end
        -- 4. Health (hpFrame)
        if data.hpFrame and data.hpLabel and self.displayConfig.showHealth ~= false then
            data.hpLabel.Parent = data.hpFrame
        end
        -- 5. Health % (hpFrame)
        if data.hpFrame and data.hpPercLabel and self.displayConfig.showHealthPercent ~= false then
            data.hpPercLabel.Parent = data.hpFrame
        end
    end
end

return PlayerESP
