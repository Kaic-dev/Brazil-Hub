local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local Utils = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/refs/heads/main/Utils"))()
local utils = Utils.new()
local ConnectionManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/main/ConnectionManager"))()

local function getBestAdornee(character)
    return character:FindFirstChild("Head") or character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso") or character:FindFirstChildWhichIsA("BasePart")
end

local PlayerESP = {}
PlayerESP.__index = PlayerESP

function PlayerESP.new()
    local self = setmetatable({}, PlayerESP)
    self.enabled = false
    self._connMgr = ConnectionManager.new()
    self._playerConnMgrs = {}
    self.espBillboards = {}
    self.dataCache = {}
    self.displayConfig = {
        showPlayerName = true,
        showRogueName = true,
        showEdict = true,
        showHealth = true,
        showHealthPercent = true,
        showDistance = true
    }
    self._lastUpdate = 0
    return self
end

function PlayerESP:createBillboard(player)
    local character = player.Character
    if not character or character:FindFirstChild("PlayerESP") then return end
    
    local adornee = getBestAdornee(character)
    if not adornee then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlayerESP"
    billboard.LightInfluence = 1
    billboard.Active = true
    billboard.Adornee = adornee
    billboard.ClipsDescendants = true
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 500, 0, 100)
    billboard.Parent = adornee

    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 3)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = billboard

    local nameFrame = Instance.new("Frame")
    nameFrame.BackgroundTransparency = 1
    nameFrame.Size = UDim2.new(1, 0, 0.1, 0)
    nameFrame.Parent = billboard

    local nameLabel = Instance.new("TextLabel")
    nameLabel.FontSize = Enum.FontSize.Size14
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.Text = "[" .. player.Name .. "]"
    nameLabel.TextStrokeTransparency = 0.5
    nameLabel.Font = Enum.Font.SourceSansSemibold
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextSize = 14
    nameLabel.Size = UDim2.new(0, 0, 0.1, 0)
    nameLabel.AutomaticSize = Enum.AutomaticSize.X
    nameLabel.TextXAlignment = Enum.TextXAlignment.Center
    nameLabel.Parent = nameFrame

    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.FontSize = Enum.FontSize.Size14
    distanceLabel.TextColor3 = Color3.new(1, 1, 1)
    distanceLabel.Text = "[0m]"
    distanceLabel.TextStrokeTransparency = 0.5
    distanceLabel.Font = Enum.Font.SourceSansSemibold
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextSize = 14
    distanceLabel.Size = UDim2.new(0, 0, 0.1, 0)
    distanceLabel.AutomaticSize = Enum.AutomaticSize.X
    distanceLabel.TextXAlignment = Enum.TextXAlignment.Center
    distanceLabel.Parent = nameFrame

    local nameLayout = Instance.new("UIListLayout")
    nameLayout.FillDirection = Enum.FillDirection.Horizontal
    nameLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    nameLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    nameLayout.SortOrder = Enum.SortOrder.LayoutOrder
    nameLayout.Parent = nameFrame

    local infoFrame = Instance.new("Frame")
    infoFrame.BackgroundTransparency = 1
    infoFrame.Size = UDim2.new(1, 0, 0.1, 0)
    infoFrame.Parent = billboard

    local infoLayout = Instance.new("UIListLayout")
    infoLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    infoLayout.FillDirection = Enum.FillDirection.Horizontal
    infoLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    infoLayout.SortOrder = Enum.SortOrder.LayoutOrder
    infoLayout.Parent = infoFrame

    local rogueLabel = Instance.new("TextLabel")
    rogueLabel.FontSize = Enum.FontSize.Size14
    rogueLabel.TextColor3 = Color3.new(1, 1, 1)
    rogueLabel.Text = "[Lord Abadon Terrified]"
    rogueLabel.TextStrokeTransparency = 0.5
    rogueLabel.AutomaticSize = Enum.AutomaticSize.X
    rogueLabel.Font = Enum.Font.SourceSansSemibold
    rogueLabel.BackgroundTransparency = 1
    rogueLabel.TextSize = 14
    rogueLabel.Size = UDim2.new(0, 0, 0.1, 0)
    rogueLabel.Parent = infoFrame

    local edictLabel = Instance.new("TextLabel")
    edictLabel.FontSize = Enum.FontSize.Size14
    edictLabel.TextColor3 = Color3.new(1, 1, 1)
    edictLabel.Text = "[Healer]"
    edictLabel.TextStrokeTransparency = 0.5
    edictLabel.Font = Enum.Font.SourceSansSemibold
    edictLabel.BackgroundTransparency = 1
    edictLabel.AutomaticSize = Enum.AutomaticSize.X
    edictLabel.TextSize = 14
    edictLabel.Size = UDim2.new(0, 0, 0.1, 0)
    edictLabel.Parent = infoFrame

    local hpFrame = Instance.new("Frame")
    hpFrame.BackgroundTransparency = 1
    hpFrame.Size = UDim2.new(1, 0, 0.1, 0)
    hpFrame.Parent = billboard

    local hpLayout = Instance.new("UIListLayout")
    hpLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    hpLayout.FillDirection = Enum.FillDirection.Horizontal
    hpLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    hpLayout.SortOrder = Enum.SortOrder.LayoutOrder
    hpLayout.Parent = hpFrame

    local hpLabel = Instance.new("TextLabel")
    hpLabel.FontSize = Enum.FontSize.Size14
    hpLabel.TextColor3 = Color3.new(1, 1, 1)
    hpLabel.Text = "[100/100]"
    hpLabel.TextStrokeTransparency = 0.5
    hpLabel.Font = Enum.Font.SourceSansSemibold
    hpLabel.BackgroundTransparency = 1
    hpLabel.AutomaticSize = Enum.AutomaticSize.X
    hpLabel.TextSize = 14
    hpLabel.Size = UDim2.new(0, 0, 0.1, 0)
    hpLabel.Parent = hpFrame

    local hpPercLabel = Instance.new("TextLabel")
    hpPercLabel.FontSize = Enum.FontSize.Size14
    hpPercLabel.TextColor3 = Color3.new(1, 1, 1)
    hpPercLabel.Text = "[100%]"
    hpPercLabel.TextStrokeTransparency = 0.5
    hpPercLabel.Font = Enum.Font.SourceSansSemibold
    hpPercLabel.BackgroundTransparency = 1
    hpPercLabel.AutomaticSize = Enum.AutomaticSize.X
    hpPercLabel.TextSize = 14
    hpPercLabel.Size = UDim2.new(0, 0, 0.1, 0)
    hpPercLabel.Parent = hpFrame

    self.espBillboards[player] = {
        billboard = billboard,
        nameLabel = nameLabel,
        distanceLabel = distanceLabel,
        rogueLabel = rogueLabel,
        edictLabel = edictLabel,
        hpLabel = hpLabel,
        hpPercLabel = hpPercLabel,
        infoFrame = infoFrame,
        hpFrame = hpFrame,
        nameFrame = nameFrame
    }
    
    self.dataCache[player] = {
        lastUpdate = 0,
        rogueName = "",
        edict = "",
        healthDisplay = "",
        healthPercentDisplay = ""
    }
    
    self:setDisplayConfig(self.displayConfig)
    self:updatePlayerData(player)
end

function PlayerESP:removeBillboard(player)
    local data = self.espBillboards[player]
    if data and data.billboard then
        data.billboard:Destroy()
        self.espBillboards[player] = nil
    end
    self.dataCache[player] = nil
end

function PlayerESP:updatePlayerData(player)
    if not player or not player.Parent then return end
    
    local cache = self.dataCache[player]
    if not cache then return end
    
    local currentTime = tick()
    if currentTime - cache.lastUpdate < 1 then return end
    
    cache.rogueName = utils:getPlayerRogueDisplay(player)
    cache.edict = utils:getPlayerEdictDisplay(player)
    cache.healthDisplay, cache.healthPercentDisplay = utils:getPlayerHealthDisplay(player)
    cache.lastUpdate = currentTime
    
    local data = self.espBillboards[player]
    if not data then return end
    
    data.nameLabel.Text = "[" .. player.Name .. "]"
    data.rogueLabel.Text = "[" .. cache.rogueName .. "]"
    data.edictLabel.Text = "[" .. cache.edict .. "]"
    data.hpLabel.Text = "[" .. cache.healthDisplay .. "]"
    data.hpPercLabel.Text = "[" .. cache.healthPercentDisplay .. "]"
    
    local localChar = Players.LocalPlayer and Players.LocalPlayer.Character
    local targetChar = player.Character
    if localChar and targetChar then
        local localRoot = localChar:FindFirstChild("HumanoidRootPart")
        local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
        if localRoot and targetRoot then
            local dist = (localRoot.Position - targetRoot.Position).Magnitude
            data.distanceLabel.Text = string.format("[%dm]", math.floor(dist))
        else
            data.distanceLabel.Text = "[0m]"
        end
    end
end

function PlayerESP:updateBillboards()
    local currentTime = tick()
    if currentTime - self._lastUpdate < 0.5 then return end
    self._lastUpdate = currentTime
    
    for player, data in pairs(self.espBillboards) do
        if player and player.Parent and player.Character then
            self:updatePlayerData(player)
        else
            self:removeBillboard(player)
        end
    end
end

function PlayerESP:connectPlayer(player)
    if player == Players.LocalPlayer then return end
    
    local mgr = self._playerConnMgrs[player]
    if mgr then mgr:disconnectAll() end
    
    mgr = ConnectionManager.new()
    self._playerConnMgrs[player] = mgr
    
    mgr:add(player.CharacterAdded:Connect(function(character)
        if self.enabled then
            task.wait(0.1)
            self:createBillboard(player)
        end
    end))
    
    mgr:add(player.CharacterRemoving:Connect(function(character)
        self:removeBillboard(player)
    end))
    
    if player.Character then
        self:createBillboard(player)
    end
end

function PlayerESP:enable()
    self.enabled = true
    self:cleanup()
    
    for _, player in ipairs(Players:GetPlayers()) do
        self:connectPlayer(player)
    end
    
    self._connMgr:add(Players.PlayerAdded:Connect(function(player)
        self:connectPlayer(player)
    end))
    
    self._connMgr:add(Players.PlayerRemoving:Connect(function(player)
        self:removeBillboard(player)
        local mgr = self._playerConnMgrs[player]
        if mgr then
            mgr:disconnectAll()
            self._playerConnMgrs[player] = nil
        end
    end))
    
    self._connMgr:add(RunService.Heartbeat:Connect(function()
        self:updateBillboards()
    end))
end

function PlayerESP:disable()
    self.enabled = false
    self:cleanup()
end

function PlayerESP:cleanup()
    self._connMgr:disconnectAll()
    for _, mgr in pairs(self._playerConnMgrs) do
        mgr:disconnectAll()
    end
    self._playerConnMgrs = {}
    for player, _ in pairs(self.espBillboards) do
        self:removeBillboard(player)
    end
    self.dataCache = {}
end

function PlayerESP:setTextSize(size)
    for _, data in pairs(self.espBillboards) do
        data.nameLabel.TextSize = size
        data.rogueLabel.TextSize = size
        data.edictLabel.TextSize = size
        data.hpLabel.TextSize = size
        data.hpPercLabel.TextSize = size
    end
end

function PlayerESP:setTextColor(color)
    for _, data in pairs(self.espBillboards) do
        data.nameLabel.TextColor3 = color
        data.rogueLabel.TextColor3 = color
        data.edictLabel.TextColor3 = color
        data.hpLabel.TextColor3 = color
        data.hpPercLabel.TextColor3 = color
    end
end

function PlayerESP:setDisplayConfig(config)
    self.displayConfig = config or self.displayConfig
    
    for _, data in pairs(self.espBillboards) do
        local frameConfigs = {
            {frame = data.nameFrame, labels = {
                {label = data.nameLabel, show = self.displayConfig.showPlayerName},
                {label = data.distanceLabel, show = self.displayConfig.showDistance}
            }},
            {frame = data.infoFrame, labels = {
                {label = data.rogueLabel, show = self.displayConfig.showRogueName},
                {label = data.edictLabel, show = self.displayConfig.showEdict}
            }},
            {frame = data.hpFrame, labels = {
                {label = data.hpLabel, show = self.displayConfig.showHealth},
                {label = data.hpPercLabel, show = self.displayConfig.showHealthPercent}
            }}
        }
        
        for i, frameConfig in ipairs(frameConfigs) do
            local frame = frameConfig.frame
            local hasContent = false
            
            for _, child in ipairs(frame:GetChildren()) do
                if not child:IsA("UIListLayout") then
                    child.Parent = nil
                end
            end
            
            for _, labelConfig in ipairs(frameConfig.labels) do
                if labelConfig.show ~= false and labelConfig.label then
                    labelConfig.label.Parent = frame
                    hasContent = true
                end
            end
            
            frame.LayoutOrder = i
            frame.Parent = hasContent and data.billboard or nil
        end
    end
end

return PlayerESP
