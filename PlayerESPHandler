-- PlayerESPHandler.lua - OTIMIZADO
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Carrega o módulo Utils
local Utils = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/refs/heads/main/Utils"))()
local utils = Utils.new()

-- Carrega o BillboardManager como ponte
local BillboardManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/refs/heads/main/BillboardManager"))()
local billboardManager = BillboardManager.new()

local function getBestAdornee(character)
    return character:FindFirstChild("Head")
        or character:FindFirstChild("UpperTorso")
        or character:FindFirstChild("Torso")
        or character:FindFirstChildWhichIsA("BasePart")
end

local PlayerESP = {}
PlayerESP.__index = PlayerESP

PlayerESP.defaultTextSize = 14
PlayerESP.defaultTextColor = Color3.new(1,1,1)

-- Store display config (default: all true)
PlayerESP.displayConfig = {
    showPlayerName = true,
    showRogueName = true,
    showEdict = true,
    showHealth = true,
    showHealthPercent = true,
    showDistance = true
}

local ConnectionManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/main/ConnectionManager"))()

function PlayerESP.new()
    local self = setmetatable({}, PlayerESP)
    self.enabled = false
    self._connMgr = ConnectionManager.new()
    self._playerConnMgrs = {} -- [player] = ConnectionManager
    self.espBillboards = {}
    self.dataCache = {}
    return self
end

function PlayerESP:createBillboard(player)
    local character = player.Character
    if not character or character:FindFirstChild("PlayerESP") then
        return nil
    end

    local adornee = billboardManager:getBestAdornee(character)
    if not adornee then
        return nil
    end

    -- Create main billboard using BillboardManager
    local billboard = billboardManager:createBillboard("PlayerESP", adornee)
    
    -- Add vertical layout
    billboardManager:createVerticalLayout(billboard)

    -- Create name frame (horizontal layout for name and distance)
    local nameFrame = billboardManager:createHorizontalFrame(billboard)
    
    local nameLabel = billboardManager:createTextLabel("[" .. player.Name .. "]", nil, nil, nameFrame)
    local distanceLabel = billboardManager:createTextLabel("[0m]", nil, nil, nameFrame)

    -- Create info frame (horizontal layout for rogue and edict)
    local infoFrame = billboardManager:createHorizontalFrame(billboard)
    
    local rogueLabel = billboardManager:createTextLabel("[Lord Abadon Terrified]", nil, nil, infoFrame)
    local edictLabel = billboardManager:createTextLabel("[Healer]", nil, nil, infoFrame)

    -- Create HP frame (horizontal layout for health and percentage)
    local hpFrame = billboardManager:createHorizontalFrame(billboard)
    
    local hpLabel = billboardManager:createTextLabel("[100/100]", nil, nil, hpFrame)
    local hpPercLabel = billboardManager:createTextLabel("[100%]", nil, nil, hpFrame)

    -- Store components for easy access
    local components = {
        billboard = billboard,
        nameLabel = nameLabel,
        distanceLabel = distanceLabel,
        rogueLabel = rogueLabel,
        edictLabel = edictLabel,
        hpLabel = hpLabel,
        hpPercLabel = hpPercLabel
    }
    
    self.espBillboards[player] = components
    return components
end

function PlayerESP:updateBillboard(player)
    local components = self.espBillboards[player]
    if not components then return end

    -- Get cached data or fetch new data
    local data = self.dataCache[player] or utils:getPlayerFullData(player)
    if not data then return end

    -- Update name and distance
    if self.displayConfig.showPlayerName then
        billboardManager:updateLabel(components.nameLabel, "[" .. player.Name .. "]")
    else
        billboardManager:updateLabel(components.nameLabel, "")
    end

    if self.displayConfig.showDistance then
        local distance = math.floor((player.Character and player.Character:FindFirstChild("HumanoidRootPart") and 
            game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and 
            (player.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude) or 0)
        billboardManager:updateLabel(components.distanceLabel, "[" .. distance .. "m]")
    else
        billboardManager:updateLabel(components.distanceLabel, "")
    end

    -- Update rogue name
    if self.displayConfig.showRogueName then
        local rogueName = utils:getPlayerRogueDisplay(player)
        billboardManager:updateLabel(components.rogueLabel, "[" .. rogueName .. "]")
    else
        billboardManager:updateLabel(components.rogueLabel, "")
    end

    -- Update edict
    if self.displayConfig.showEdict then
        local edict = utils:getPlayerEdictDisplay(player)
        billboardManager:updateLabel(components.edictLabel, "[" .. edict .. "]")
    else
        billboardManager:updateLabel(components.edictLabel, "")
    end

    -- Update health
    if self.displayConfig.showHealth then
        local healthDisplay, healthPercentDisplay = utils:getPlayerHealthDisplay(player)
        billboardManager:updateLabel(components.hpLabel, "[" .. healthDisplay .. "]")
        
        if self.displayConfig.showHealthPercent then
            billboardManager:updateLabel(components.hpPercLabel, "[" .. healthPercentDisplay .. "]")
        else
            billboardManager:updateLabel(components.hpPercLabel, "")
        end
    else
        billboardManager:updateLabel(components.hpLabel, "")
        billboardManager:updateLabel(components.hpPercLabel, "")
    end
end

function PlayerESP:setTextSize(size)
    self.defaultTextSize = size
    -- Update all existing billboards
    for player, components in pairs(self.espBillboards) do
        if components then
            billboardManager:updateLabelSize(components.nameLabel, size)
            billboardManager:updateLabelSize(components.distanceLabel, size)
            billboardManager:updateLabelSize(components.rogueLabel, size)
            billboardManager:updateLabelSize(components.edictLabel, size)
            billboardManager:updateLabelSize(components.hpLabel, size)
            billboardManager:updateLabelSize(components.hpPercLabel, size)
        end
    end
end

function PlayerESP:setTextColor(color)
    self.defaultTextColor = color
    -- Update all existing billboards
    for player, components in pairs(self.espBillboards) do
        if components then
            billboardManager:updateLabelColor(components.nameLabel, color)
            billboardManager:updateLabelColor(components.distanceLabel, color)
            billboardManager:updateLabelColor(components.rogueLabel, color)
            billboardManager:updateLabelColor(components.edictLabel, color)
            billboardManager:updateLabelColor(components.hpLabel, color)
            billboardManager:updateLabelColor(components.hpPercLabel, color)
        end
    end
end

function PlayerESP:setDisplayConfig(config)
    self.displayConfig = config or self.displayConfig
    -- Update all existing billboards with new config
    for player, _ in pairs(self.espBillboards) do
        self:updateBillboard(player)
    end
end

-- OTIMIZAÇÃO CRÍTICA: Função para atualizar dados de um player específico
function PlayerESP:_updatePlayerData(player)
    if not player or not player.Character then return end
    
    -- Cache com timeout de 1 segundo (ao invés de calcular a cada frame)
    local currentTime = tick()
    local cachedData = self.dataCache[player]
    
    if not cachedData or (currentTime - cachedData.timestamp) > 1 then
        self.dataCache[player] = {
            data = utils:getPlayerFullData(player),
            timestamp = currentTime
        }
    end
end

-- CORREÇÃO CRÍTICA: Função de conexão de player com limpeza adequada
function PlayerESP:_connectPlayer(player)
    if self._playerConnMgrs[player] then
        self._playerConnMgrs[player]:disconnectAll()
    end
    
    self._playerConnMgrs[player] = ConnectionManager.new()
    local mgr = self._playerConnMgrs[player]
    
    -- Create billboard when character spawns
    mgr:add(player.CharacterAdded:Connect(function(character)
        task.wait(1) -- Wait for character to fully load
        self:createBillboard(player)
        self:_updatePlayerData(player)
        self:updateBillboard(player)
    end))
    
    -- Remove billboard when character dies
    mgr:add(player.CharacterRemoving:Connect(function(character)
        if self.espBillboards[player] then
            billboardManager:destroyBillboard(self.espBillboards[player].billboard)
            self.espBillboards[player] = nil
        end
    end))
    
    -- Create billboard if character already exists
    if player.Character then
        self:createBillboard(player)
        self:_updatePlayerData(player)
        self:updateBillboard(player)
    end
end

function PlayerESP:enable()
    if self.enabled then return end
    self.enabled = true
    
    -- Connect to existing players
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            self:_connectPlayer(player)
        end
    end
    
    -- Connect to new players
    self._connMgr:add(Players.PlayerAdded:Connect(function(player)
        if player ~= game.Players.LocalPlayer then
            self:_connectPlayer(player)
        end
    end))
    
    -- Disconnect from leaving players
    self._connMgr:add(Players.PlayerRemoving:Connect(function(player)
        if self._playerConnMgrs[player] then
            self._playerConnMgrs[player]:disconnectAll()
            self._playerConnMgrs[player] = nil
        end
        if self.espBillboards[player] then
            billboardManager:destroyBillboard(self.espBillboards[player].billboard)
            self.espBillboards[player] = nil
        end
        self.dataCache[player] = nil
    end))
    
    -- OTIMIZAÇÃO CRÍTICA: Refatoração completa da função de atualização
    self._connMgr:add(RunService.Heartbeat:Connect(function()
        if not self.enabled then return end
        
        -- OTIMIZAÇÃO: Throttling mais agressivo - atualizar apenas a cada 0.5s (2 FPS)
        local currentTime = tick()
        if not self._lastUpdateTime or (currentTime - self._lastUpdateTime) >= 0.5 then
            self._lastUpdateTime = currentTime
            
            -- OTIMIZAÇÃO: Iterar apenas sobre players que já têm billboards
            for player, components in pairs(self.espBillboards) do
                if player and player.Character and components then
                    self:_updatePlayerData(player)
                    self:updateBillboard(player)
                else
                    -- CORREÇÃO: Remover billboard se player não é mais válido
                    if components then
                        billboardManager:destroyBillboard(components.billboard)
                        self.espBillboards[player] = nil
                    end
                end
            end
        end
    end))
end

function PlayerESP:disable()
    if not self.enabled then return end
    self.enabled = false
    
    -- CORREÇÃO CRÍTICA: Limpeza completa melhorada
    self._connMgr:disconnectAll()
    for _, mgr in pairs(self._playerConnMgrs) do
        mgr:disconnectAll()
    end
    self._playerConnMgrs = {}
    
    -- Destroy all billboards
    for player, components in pairs(self.espBillboards) do
        if components then
            billboardManager:destroyBillboard(components.billboard)
        end
    end
    self.espBillboards = {}
    
    -- Clear cache
    self.dataCache = {}
end

return PlayerESP
