-- FFHandler.lua
-- Módulo OOP para detecção e gerenciamento de ForceFields em personagens Roblox

local Players = game:GetService('Players')
local RunService = game:GetService('RunService')

-- Carrega o módulo Utils
local Utils = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/refs/heads/main/Utils"))()
local utils = Utils.new()

local FF_DURATION = 120
local BILLBOARD_SIZE = UDim2.new(0, 80, 0, 24)
local BILLBOARD_OFFSET = Vector3.new(0, 2.2, 0)
local getTime = time or tick

local ConnectionManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/main/ConnectionManager"))()

local function getBestAdornee(character)
    return character:FindFirstChild('Head')
        or character:FindFirstChild('UpperTorso')
        or character:FindFirstChild('Torso')
        or character:FindFirstChildWhichIsA('BasePart')
end

local FFDetector = {}
FFDetector.__index = FFDetector

function FFDetector.new()
    local self = setmetatable({}, FFDetector)
    self.enabled = false
    self._connMgr = ConnectionManager.new() -- Connections globais
    self._playerConnMgrs = {} -- [player] = ConnectionManager para connections específicas do player
    self._charConnMgrs = {} -- [character] = ConnectionManager para connections específicas do character
    self.billboards = {} -- [character] = {billboard, label, lastTimeLeft}
    self.ffData = {} -- [character] = {ff, startTime}
    self.billboardMaxDistance = 125
    self.billboardTextSize = 18
    self._lastUpdate = 0
    return self
end

function FFDetector:getFFColor(timeLeft)
    return utils:getForceFieldColor(timeLeft)
end

function FFDetector:updateBillboardDistance()
    for _, data in pairs(self.billboards) do
        if data.billboard then
            data.billboard.MaxDistance = self.billboardMaxDistance
        end
    end
end

function FFDetector:updateBillboardTextSize()
    for _, data in pairs(self.billboards) do
        if data.label then
            data.label.TextSize = self.billboardTextSize
        end
    end
end

function FFDetector:createBillboard(character, ff, startTime)
    if not character or not ff then return end
    if character:FindFirstChild('FFBillboard') then return end
    
    local player = Players:GetPlayerFromCharacter(character)
    if not player then return end
    
    local timeLeft = utils:getForceFieldTimeLeft(player)
    
    local billboard = Instance.new('BillboardGui')
    billboard.Name = 'FFBillboard'
    billboard.Size = BILLBOARD_SIZE
    billboard.StudsOffset = BILLBOARD_OFFSET
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = self.billboardMaxDistance
    billboard.Adornee = getBestAdornee(character)
    billboard.Parent = character
    
    local label = Instance.new('TextLabel')
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = self:getFFColor(timeLeft)
    label.TextStrokeTransparency = 0.5
    label.TextScaled = false
    label.TextSize = self.billboardTextSize
    label.Font = Enum.Font.SourceSansBold
    label.Text = string.format('%.1f s until FF is out', timeLeft)
    label.Parent = billboard
    
    self.billboards[character] = {
        billboard = billboard,
        label = label,
        lastTimeLeft = timeLeft
    }
end

function FFDetector:removeBillboard(character)
    local data = self.billboards[character]
    if data and data.billboard then
        data.billboard:Destroy()
    end
    self.billboards[character] = nil
end

function FFDetector:clearCharacterData(character)
    -- Remove billboard primeiro
    self:removeBillboard(character)
    
    -- Remove dados do FF
    self.ffData[character] = nil
    
    -- Desconecta e remove connection manager específico do character
    if self._charConnMgrs[character] then
        self._charConnMgrs[character]:disconnectAll()
        self._charConnMgrs[character] = nil
    end
end

function FFDetector:clearPlayerData(player)
    -- Limpa dados do character atual
    if player.Character then
        self:clearCharacterData(player.Character)
    end
    
    -- Desconecta e remove connection manager específico do player
    if self._playerConnMgrs[player] then
        self._playerConnMgrs[player]:disconnectAll()
        self._playerConnMgrs[player] = nil
    end
end

function FFDetector:cleanup()
    -- Desconecta todas as connections globais
    self._connMgr:disconnectAll()
    
    -- Desconecta todas as connections específicas de players
    for player, mgr in pairs(self._playerConnMgrs) do
        mgr:disconnectAll()
    end
    self._playerConnMgrs = {}
    
    -- Desconecta todas as connections específicas de characters
    for character, mgr in pairs(self._charConnMgrs) do
        mgr:disconnectAll()
    end
    self._charConnMgrs = {}
    
    -- Remove todos os billboards
    for character, _ in pairs(self.billboards) do
        self:removeBillboard(character)
    end
    
    -- Limpa dados dos FFs
    self.ffData = {}
end

function FFDetector:onForceFieldAdded(character, ff)
    if not ff:GetAttribute("StartTime") then
        ff:SetAttribute("StartTime", tick())
    end
    
    -- Evita duplicatas
    if self.ffData[character] and self.ffData[character].ff == ff then return end
    
    self.ffData[character] = {ff = ff, startTime = getTime()}
    self:createBillboard(character, ff, self.ffData[character].startTime)
    
    -- Adiciona connection para detectar quando FF é removido
    if self._charConnMgrs[character] then
        self._charConnMgrs[character]:add(ff.AncestryChanged:Connect(function(_, parent)
            if not parent then
                self:clearCharacterData(character)
            end
        end))
    end
end

function FFDetector:registerCharacterFF(character)
    -- Limpa connections anteriores do character
    if self._charConnMgrs[character] then
        self._charConnMgrs[character]:disconnectAll()
    end
    
    -- Cria novo connection manager para o character
    self._charConnMgrs[character] = ConnectionManager.new()
    local mgr = self._charConnMgrs[character]
    
    -- Registra FFs existentes
    for _, ff in ipairs(character:GetChildren()) do
        if ff:IsA('ForceField') then
            if not ff:GetAttribute("StartTime") then
                ff:SetAttribute("StartTime", tick())
            end
            if not self.ffData[character] then
                self.ffData[character] = {ff = ff, startTime = getTime()}
            end
            self:createBillboard(character, ff, self.ffData[character].startTime)
        end
    end
    
    -- Monitora novos FFs adicionados
    mgr:add(character.ChildAdded:Connect(function(child)
        if child:IsA('ForceField') then
            self:onForceFieldAdded(character, child)
        end
    end))
    
    -- Monitora quando character é removido
    mgr:add(character.AncestryChanged:Connect(function(_, parent)
        if not parent then
            self:clearCharacterData(character)
        end
    end))
end

function FFDetector:registerPlayer(player)
    -- Limpa connections anteriores do player
    if self._playerConnMgrs[player] then
        self._playerConnMgrs[player]:disconnectAll()
    end
    
    -- Cria novo connection manager para o player
    self._playerConnMgrs[player] = ConnectionManager.new()
    local mgr = self._playerConnMgrs[player]
    
    -- Registra character atual se existir
    if player.Character then
        self:registerCharacterFF(player.Character)
    end
    
    -- Monitora novos characters
    mgr:add(player.CharacterAdded:Connect(function(character)
        if self.enabled then
            self:registerCharacterFF(character)
        end
    end))
    
    -- Monitora quando character é removido (CharacterRemoving)
    mgr:add(player.CharacterRemoving:Connect(function(character)
        self:clearCharacterData(character)
    end))
end

function FFDetector:updateBillboards()
    -- Otimização: throttling para atualizar no máximo a cada 0.15s
    if tick() - self._lastUpdate < 0.15 then return end
    self._lastUpdate = tick()
    
    for _, player in ipairs(Players:GetPlayers()) do
        local character = player.Character
        if character then
            local data = self.ffData[character]
            if data and data.ff and data.ff.Parent == character then
                local timeLeft = utils:getForceFieldTimeLeft(player)
                local bdata = self.billboards[character]
                
                if not bdata then
                    self:createBillboard(character, data.ff, data.startTime)
                else
                    -- Só atualiza se o tempo mudou significativamente
                    if bdata.lastTimeLeft == nil or math.abs(bdata.lastTimeLeft - timeLeft) > 0.19 then
                        if bdata.label then
                            bdata.label.Text = string.format('%.1f s until FF is out', timeLeft)
                            bdata.label.TextColor3 = self:getFFColor(timeLeft)
                        end
                        if bdata.billboard then
                            bdata.billboard.MaxDistance = self.billboardMaxDistance
                        end
                        bdata.lastTimeLeft = timeLeft
                    end
                end
            else
                -- Remove billboard se FF não existe mais
                if self.billboards[character] then
                    self:clearCharacterData(character)
                end
            end
        end
    end
end

function FFDetector:enable()
    if self.enabled then return end
    
    self.enabled = true
    self:cleanup() -- Limpa estado anterior
    
    -- Registra players existentes
    for _, player in ipairs(Players:GetPlayers()) do
        self:registerPlayer(player)
    end
    
    -- Monitora novos players
    self._connMgr:add(Players.PlayerAdded:Connect(function(player)
        if self.enabled then
            self:registerPlayer(player)
        end
    end))
    
    -- Monitora players que saem
    self._connMgr:add(Players.PlayerRemoving:Connect(function(player)
        self:clearPlayerData(player)
    end))
    
    -- Atualiza billboards
    self._connMgr:add(RunService.RenderStepped:Connect(function()
        if self.enabled then
            self:updateBillboards()
        end
    end))
end

function FFDetector:disable()
    if not self.enabled then return end
    
    self.enabled = false
    self:cleanup()
end

function FFDetector:setBillboardMaxDistance(value)
    self.billboardMaxDistance = value
    self:updateBillboardDistance()
end

function FFDetector:setBillboardTextSize(value)
    self.billboardTextSize = value
    self:updateBillboardTextSize()
end

return FFDetector
