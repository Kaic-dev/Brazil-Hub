-- trinket_esp_handler.lua
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local TrinketESP = {}
TrinketESP.__index = TrinketESP

TrinketESP.defaultTextSize = 14
TrinketESP.defaultTextColor = Color3.fromRGB(255, 255, 0)
TrinketESP.enabled = false

-- Tabela de MeshIds conhecidos para identificação de trinkets
local MESH_ID_MAP = {
    ["rbxassetid://5196551436"] = "Amulet",
    ["rbxassetid://5196577540"] = "Old Amulet",
    ["rbxassetid://5204003946"] = "Goblet",
    ["rbxassetid://5204453430"] = "Scroll",
    ["rbxassetid://2877143560"] = "Ruby",
    ["rbxassetid://2877143592"] = "Sapphire",
    ["rbxassetid://2877143624"] = "Emerald",
    -- Adicione outros MeshIds conforme necessário
}

local function getTrinketNameByMeshId(part)
    -- 1. MeshPart direto
    if part:IsA("MeshPart") and part.MeshId then
        local meshId = tostring(part.MeshId):gsub("%%20", ""):gsub("%s+", "")
        if MESH_ID_MAP[meshId] then
            return MESH_ID_MAP[meshId]
        end
    end
    -- 2. SpecialMesh (Ruby, Sapphire, Emerald)
    local specialMesh = part:FindFirstChildWhichIsA("SpecialMesh")
    if specialMesh and specialMesh.MeshId then
        local meshId = tostring(specialMesh.MeshId):gsub("%%20", ""):gsub("%s+", "")
        if MESH_ID_MAP[meshId] then
            return MESH_ID_MAP[meshId]
        end
    end
    -- 3. Mesh (Amulet, Old Amulet, Goblet, Scroll)
    local mesh = part:FindFirstChildWhichIsA("Mesh")
    if mesh and mesh.MeshId then
        local meshId = tostring(mesh.MeshId):gsub("%%20", ""):gsub("%s+", "")
        if MESH_ID_MAP[meshId] then
            return MESH_ID_MAP[meshId]
        end
    end
    -- 4. Fallback: nome da part se for um dos conhecidos
    local fallbackName = MESH_ID_MAP[part.Name]
    if fallbackName then
        return fallbackName
    end
    return nil
end

function TrinketESP.new()
    local self = setmetatable({}, TrinketESP)
    self.espBillboards = {}
    self.connections = {}
    return self
end

function TrinketESP:findTrinkets()
    -- Ajuste o caminho conforme o jogo
    local trinketFolder = Workspace
    if not trinketFolder then return {} end
    local trinkets = {}
    for _, obj in ipairs(trinketFolder:GetChildren()) do
        -- MeshPart com MeshId conhecido
        if obj:IsA("MeshPart") and obj.MeshId and MESH_ID_MAP[tostring(obj.MeshId):gsub("%%20", ""):gsub("%s+", "")] then
            table.insert(trinkets, obj)
        -- BasePart com StringValue 'ID'
        elseif obj:IsA("BasePart") then
            local idValue = obj:FindFirstChild("ID")
            if idValue and idValue:IsA("StringValue") then
                table.insert(trinkets, obj)
            end
        end
    end
    return trinkets
end

function TrinketESP:createBillboard(trinket)
    if self.espBillboards[trinket] then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "TrinketESP"
    billboard.Adornee = trinket
    billboard.LightInfluence = 1
    billboard.Active = true
    billboard.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    billboard.ClipsDescendants = true
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 100, 0, 100)
    billboard.Parent = trinket

    local label = Instance.new("TextLabel")
    label.FontSize = Enum.FontSize.Size14
    label.TextColor3 = Color3.new(157/255, 157/255, 157/255)
    label.BorderColor3 = Color3.new(0, 0, 0)
    local meshName = getTrinketNameByMeshId(trinket)
    label.Text = meshName or trinket.Name
    label.TextStrokeTransparency = 0.5
    label.AnchorPoint = Vector2.new(0.5, 0.5)
    label.Font = Enum.Font.SourceSans
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0.5, 0, 0.5, 0)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.TextSize = 14
    label.BorderSizePixel = 0
    label.BackgroundColor3 = Color3.new(1, 1, 1)
    label.Parent = billboard

    local scale = Instance.new("UIScale")
    scale.Parent = billboard

    self.espBillboards[trinket] = billboard
end

function TrinketESP:removeBillboard(trinket)
    if self.espBillboards[trinket] then
        self.espBillboards[trinket]:Destroy()
        self.espBillboards[trinket] = nil
    end
end

function TrinketESP:updateESP()
    local trinkets = self:findTrinkets()
    local trinketSet = {}
    for _, trinket in ipairs(trinkets) do
        trinketSet[trinket] = true
        self:createBillboard(trinket)
    end
    -- Remove billboards de trinkets que sumiram
    for trinket in pairs(self.espBillboards) do
        if not trinketSet[trinket] then
            self:removeBillboard(trinket)
        end
    end
end

function TrinketESP:enable()
    if self.enabled then return end
    self.enabled = true
    self:updateESP()
    table.insert(self.connections, RunService.Heartbeat:Connect(function()
        self:updateESP()
    end))
end

function TrinketESP:disable()
    self.enabled = false
    for _, conn in ipairs(self.connections) do
        if conn and conn.Disconnect then conn:Disconnect() end
    end
    self.connections = {}
    for trinket in pairs(self.espBillboards) do
        self:removeBillboard(trinket)
    end
end

return TrinketESP 
