-- IndicatorController.lua

local TweenService = game:GetService("TweenService")
local Debris = game:GetService("Debris")
local Players = game:GetService("Players")

local TWEEN_INFO = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)

local IndicatorController = {}
IndicatorController.__index = IndicatorController

-- Cria o DamageLabel programaticamente (igual ao root enviado)
function IndicatorController._createDamageLabel()
	local part = Instance.new("Part")
	part.Size = Vector3.new(1, 1, 1)
	part.Transparency = 1
	part.Name = "DamageLabel"
	part.CanCollide = false
	part.Anchored = false
	part.BottomSurface = Enum.SurfaceType.Smooth
	part.TopSurface = Enum.SurfaceType.Smooth

	local billboard = Instance.new("BillboardGui")
	billboard.LightInfluence = 1
	billboard.MaxDistance = math.huge
	billboard.Active = true
	billboard.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	billboard.ClipsDescendants = true
	billboard.AlwaysOnTop = true
	billboard.Size = UDim2.new(5, 0, 1.5, 0)
	billboard.Parent = part

	local shadow = Instance.new("TextLabel")
	shadow.FontSize = Enum.FontSize.Size32
	shadow.BackgroundTransparency = 1
	shadow.TextColor3 = Color3.new(0, 0, 0)
	shadow.BorderColor3 = Color3.fromRGB(27, 42, 135)
	shadow.Text = "100"
	shadow.TextSize = 30
	shadow.TextWrapped = true
	shadow.Size = UDim2.new(1, 0, 1, 0)
	shadow.Font = Enum.Font.Arcade
	shadow.Name = "Shadow"
	shadow.Position = UDim2.new(0.02, 0, 0.03, 0)
	shadow.BackgroundColor3 = Color3.new(0, 0, 0)
	shadow.ZIndex = 2
	shadow.TextScaled = true
	shadow.TextWrap = true
	shadow.Parent = billboard

	local theShadow = Instance.new("TextLabel")
	theShadow.FontSize = Enum.FontSize.Size32
	theShadow.TextColor3 = Color3.new(1, 0, 0)
	theShadow.BorderColor3 = Color3.fromRGB(27, 42, 135)
	theShadow.Text = "100"
	theShadow.BackgroundTransparency = 1
	theShadow.Size = UDim2.new(1, 0, 1, 0)
	theShadow.TextWrapped = true
	theShadow.Font = Enum.Font.Arcade
	theShadow.Name = "TheShadow"
	theShadow.TextSize = 30
	theShadow.BackgroundColor3 = Color3.new(1, 1, 1)
	theShadow.ZIndex = 2
	theShadow.TextScaled = true
	theShadow.TextWrap = true
	theShadow.Parent = billboard

	return part
end

-- Constructor
function IndicatorController.new()
	local self = setmetatable({}, IndicatorController)
	self._connections = {}
	self._instances = {}
	self._enabled = false
	return self
end

-- Enable the system (start monitoring players)
function IndicatorController:enable()
	if self._enabled then return end
	self._enabled = true

	-- Connect all current players
	for _, player in ipairs(Players:GetPlayers()) do
		self:_trackPlayer(player)
	end

	-- Connect new players
	table.insert(self._connections, Players.PlayerAdded:Connect(function(player)
		self:_trackPlayer(player)
	end))

	-- Optional: Handle player leaving (optional, since we use Debris)
end

-- Disable the system (disconnect everything)
function IndicatorController:disable()
	if not self._enabled then return end
	self._enabled = false

	-- Disconnect all connections
	for _, conn in ipairs(self._connections) do
		conn:Disconnect()
	end
	self._connections = {}

	-- Disconnect all per-character instances
	for _, instance in pairs(self._instances) do
		if instance._conn then
			instance._conn:Disconnect()
		end
	end
	self._instances = {}
end

-- Private: Track a player's characters
function IndicatorController:_trackPlayer(player)
	-- Connect current character
	if player.Character then
		self:_trackCharacter(player.Character)
	end

	-- Connect future characters
	local charConn = player.CharacterAdded:Connect(function(character)
		self:_trackCharacter(character)
	end)
	table.insert(self._connections, charConn)
end

-- Private: Track a character's health changes
function IndicatorController:_trackCharacter(character)
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if not humanoid or not hrp then return end

	local instance = {
		character = character,
		humanoid = humanoid,
		hrp = hrp,
		lastHealth = humanoid.Health
	}

    -- HealthChanged (para dano e cura)
    instance._conn = humanoid.HealthChanged:Connect(function(newHealth)
        local delta = newHealth - instance.lastHealth
    
        if delta < 0 and math.abs(delta) >= 0.1 then
            -- Dano
            self:_showIndicator(instance, math.abs(delta), "Damage")
        elseif delta > 0 and math.abs(delta) >= 0.1 then
            -- Cura
            self:_showIndicator(instance, math.abs(delta), "Heal")
        end
    
        instance.lastHealth = newHealth
    end)

	self._instances[character] = instance

	-- Cleanup on character removal
	character.AncestryChanged:Connect(function(_, parent)
		if not parent then
			if instance._conn then
                instance._conn:Disconnect()
            end     
			self._instances[character] = nil
		end
	end)
end

-- Private: Show the indicator
function IndicatorController:_showIndicator(instance, amount, indicatorType)
	local label = IndicatorController._createDamageLabel()
	label.Position = instance.hrp.Position
	
	-- Diferentes velocidades para diferentes tipos
	if indicatorType == "Heal" then
		-- Cura sobe mais devagar e com menos movimento horizontal
		label.Velocity = Vector3.new(math.random(-10, 10), math.random(15, 20), math.random(-10, 10))
	else
		-- Dano mantém a velocidade original
		label.Velocity = Vector3.new(math.random(-20, 20), math.random(20, 25), math.random(-20, 20))
	end
	
	label.Parent = workspace

	local text = math.floor(amount + 0.5)
	
	-- Adiciona prefixo para cura
	if indicatorType == "Heal" then
		text = "+" .. text
	end
	
	label.BillboardGui.Shadow.Text = text
	label.BillboardGui.TheShadow.Text = text

	local color
	if indicatorType == "Damage" then
		color = Color3.fromRGB(255, 60, 60) -- Vermelho para dano
	elseif indicatorType == "Heal" then
		color = Color3.fromRGB(85, 255, 85) -- Verde para cura
	else
		color = Color3.fromRGB(85, 255, 255) -- Azul claro (padrão)
	end

	TweenService:Create(label.BillboardGui.TheShadow, TWEEN_INFO, {TextColor3 = color}):Play()
	Debris:AddItem(label, 0.5)
end

return IndicatorController
