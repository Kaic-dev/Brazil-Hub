-- utils.lua
-- Player Data Utility Module (READ-ONLY) - OOP Implementation
-- Usage: local Utils = require(path); local utils = Utils.new(); utils:getPlayerData(player)

local Players = game:GetService("Players")

-- Constants
local CONSTANTS = {
    FORCEFIELD_DURATION = 120,     -- ForceField duration in seconds
    FORCEFIELD_WARNING_TIME = 60,  -- Warning threshold in seconds
    FORCEFIELD_CRITICAL_TIME = 20, -- Critical threshold in seconds
    
    -- Color constants for ForceField status
    COLORS = {
        SAFE = Color3.fromRGB(0, 255, 0),     -- Green
        WARNING = Color3.fromRGB(255, 255, 0), -- Yellow
        CRITICAL = Color3.fromRGB(255, 0, 0)   -- Red
    }
}

local Utils = {}
Utils.__index = Utils

--- Creates a new Utils instance
-- @return Utils instance
function Utils.new()
    local self = setmetatable({}, Utils)
    return self
end

--- Safely gets a player attribute with fallback value
-- @param player Player - The player object
-- @param attributeName string - Name of the attribute
-- @param fallback any - Fallback value if attribute doesn't exist
-- @return any - Attribute value or fallback
function Utils:_safeGetAttribute(player, attributeName, fallback)
    if not player then return fallback end
    
    local success, value = pcall(function()
        return player:GetAttribute(attributeName)
    end)
    
    return success and value or fallback
end

--- Formats a rogue name based on rank and gender
-- @param firstName string - First name
-- @param lastName string - Last name
-- @param houseRank string - House rank
-- @param gender string - Gender (Male/Female)
-- @return string - Formatted rogue name
function Utils:_formatRogueName(firstName, lastName, houseRank, gender)
    local hasLastName = lastName ~= ""
    local isOwner = houseRank == "Owner"
    
    if isOwner and hasLastName then
        local title = gender == "Female" and "Lady" or "Lord"
        return string.format("%s %s %s", title, firstName, lastName)
    end
    
    return hasLastName and string.format("%s %s", firstName, lastName) or firstName
end

--- Retrieves basic player information
-- @param player Player - The player object
-- @return table - Basic player data
function Utils:getPlayerBasicData(player)
    if not player then return {} end
    
    return {
        name = player.Name,
        displayName = player.DisplayName,
        userId = player.UserId,
        accountAge = player.AccountAge,
        firstTime = self:_safeGetAttribute(player, "FirstTime", false)
    }
end

--- Retrieves player rogue information
-- @param player Player - The player object
-- @return table - Rogue data including formatted names
function Utils:getPlayerRogueData(player)
    if not player then return {} end
    
    local firstName = tostring(self:_safeGetAttribute(player, "FirstName", ""))
    local lastName = tostring(self:_safeGetAttribute(player, "LastName", ""))
    local houseRank = self:_safeGetAttribute(player, "HouseRank", nil)
    local gender = self:_safeGetAttribute(player, "Gender", nil)
    
    local rogueName = self:_formatRogueName(firstName, lastName, houseRank, gender)
    
    return {
        firstName = firstName,
        lastName = lastName,
        houseRank = houseRank,
        gender = gender,
        rogueName = rogueName,
        fullRogueName = rogueName -- Kept for backward compatibility
    }
end

--- Retrieves player edict information
-- @param player Player - The player object
-- @return table - Edict data
function Utils:getPlayerEdictData(player)
    if not player then return {} end
    
    local edict = self:_safeGetAttribute(player, "Edict", "None")
    
    return {
        edict = edict,
        edictDisplay = edict
    }
end

--- Retrieves player prestige information
-- @param player Player - The player object
-- @return table - Prestige data
function Utils:getPlayerPrestigeData(player)
    if not player then return { level = 0 } end
    
    local prestigeLevel = self:_safeGetAttribute(player, "Prestige", 0)
    
    return {
        level = prestigeLevel,
        hasPrestige = prestigeLevel > 0
    }
end

--- Retrieves player health information
-- @param player Player - The player object
-- @return table - Health data with formatted displays
function Utils:getPlayerHealthData(player)
    if not player or not player.Character then return {} end
    
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return {} end
    
    local health = math.floor(humanoid.Health)
    local maxHealth = math.floor(humanoid.MaxHealth)
    local healthPercent = maxHealth > 0 and math.floor((health / maxHealth) * 100) or 0
    
    return {
        health = health,
        maxHealth = maxHealth,
        healthPercent = healthPercent,
        healthDisplay = string.format("%d/%d", health, maxHealth),
        healthPercentDisplay = string.format("%d%%", healthPercent)
    }
end

--- Retrieves complete player data
-- @param player Player - The player object
-- @return table - Complete player data structure
function Utils:getPlayerFullData(player)
    if not player then return {} end
    
    return {
        basic = self:getPlayerBasicData(player),
        rogue = self:getPlayerRogueData(player),
        edict = self:getPlayerEdictData(player),
        prestige = self:getPlayerPrestigeData(player),
        health = self:getPlayerHealthData(player)
    }
end

--- Gets formatted rogue name for display
-- @param player Player - The player object
-- @return string - Formatted rogue name
function Utils:getPlayerRogueDisplay(player)
    local rogueData = self:getPlayerRogueData(player)
    return rogueData.rogueName or ""
end

--- Gets formatted edict for display
-- @param player Player - The player object
-- @return string - Formatted edict display
function Utils:getPlayerEdictDisplay(player)
    local edictData = self:getPlayerEdictData(player)
    return edictData.edictDisplay or "None"
end

--- Gets formatted health for display
-- @param player Player - The player object
-- @return string, string - Health display and health percent display
function Utils:getPlayerHealthDisplay(player)
    local healthData = self:getPlayerHealthData(player)
    return healthData.healthDisplay or "0/0", healthData.healthPercentDisplay or "0%"
end

--- Checks if player has ForceField
-- @param player Player - The player object
-- @return boolean - True if player has ForceField
function Utils:hasForceField(player)
    if not player or not player.Character then return false end
    
    return player.Character:FindFirstChildOfClass("ForceField") ~= nil
end

--- Gets remaining ForceField time in seconds
-- @param player Player - The player object
-- @return number - Remaining time in seconds (0 if no ForceField)
function Utils:getForceFieldTimeLeft(player)
    if not player or not player.Character then return 0 end
    
    local forceField = player.Character:FindFirstChildOfClass("ForceField")
    if not forceField then return 0 end
    
    local startTime = self:_safeGetAttribute(forceField, "StartTime", tick())
    local elapsed = tick() - startTime
    
    return math.max(0, CONSTANTS.FORCEFIELD_DURATION - elapsed)
end

--- Gets ForceField status color based on remaining time
-- @param timeLeft number - Remaining time in seconds
-- @return Color3 - Color representing the ForceField status
function Utils:getForceFieldColor(timeLeft)
    if timeLeft > CONSTANTS.FORCEFIELD_WARNING_TIME then
        return CONSTANTS.COLORS.SAFE
    elseif timeLeft > CONSTANTS.FORCEFIELD_CRITICAL_TIME then
        return CONSTANTS.COLORS.WARNING
    else
        return CONSTANTS.COLORS.CRITICAL
    end
end

--- Gets comprehensive ForceField information
-- @param player Player - The player object
-- @return table - ForceField data including status, time, and color
function Utils:getForceFieldData(player)
    local hasFF = self:hasForceField(player)
    local timeLeft = hasFF and self:getForceFieldTimeLeft(player) or 0
    local color = self:getForceFieldColor(timeLeft)
    
    return {
        hasForceField = hasFF,
        timeLeft = timeLeft,
        timeLeftFormatted = string.format("%.1fs", timeLeft),
        color = color,
        status = hasFF and "Active" or "Inactive"
    }
end

--[[
    Returns the name of the currently equipped tool for a player, or 'None' if none is equipped.
    @param player: Player
    @return string
]]
function Utils.getEquippedToolName(player)
    local character = player and player.Character
    if not character then return "None" end
    local tool = character:FindFirstChildOfClass("Tool")
    return tool and tool.Name or "None"
end

return Utils
