-- KeyHandler: Sistema de key OOP para BrazilHub
-- Usa writefile/readfile para persistência local
-- Integração com LinoriaLib para input de key
-- ATENÇÃO: A Library (LinoriaLib) deve ser passada como argumento em KeyHandler.new(library)
-- NÃO carregue a Library dentro deste módulo!

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local KEY_FILE = "brazilhub_key.txt"
local API_URL = "https://meuservidordekey.com/validate?key=" -- Substitua pela sua API real

local KeyHandler = {}
KeyHandler.__index = KeyHandler

-- LinoriaLib deve ser passado na criação
function KeyHandler.new(library)
    local self = setmetatable({}, KeyHandler)
    self.key = nil
    self.isValid = false
    self.linoriaLib = library -- Referência à LinoriaLib
    return self
end

-- Salva a key localmente
function KeyHandler:saveKey(key)
    if writefile then
        writefile(KEY_FILE, key)
    end
    self.key = key
end

-- Lê a key salva localmente
function KeyHandler:loadKey()
    if readfile then
        local ok, result = pcall(function()
            return readfile(KEY_FILE)
        end)
        if ok and result and #result > 0 then
            self.key = result
            return result
        elseif writefile then
            -- Se o arquivo não existe, cria vazio
            writefile(KEY_FILE, "")
        end
    end
    return nil
end

-- Solicita a key do usuário via LinoriaLib AddInput
function KeyHandler:promptKey()
    local player = Players.LocalPlayer

    -- Remove UI antiga se existir
    if player.PlayerGui:FindFirstChild("BrazilHubKeyUI") then
        player.PlayerGui.BrazilHubKeyUI:Destroy()
    end

    -- Cria UI
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BrazilHubKeyUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = player:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 0, 0, 0)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.BackgroundTransparency = 1
    frame.Parent = screenGui

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 40)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "BrazilHub Key System"
    title.Font = Enum.Font.SourceSansBold
    title.TextSize = 24
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Parent = frame

    local input = Instance.new("TextBox")
    input.Size = UDim2.new(0.8, 0, 0, 36)
    input.Position = UDim2.new(0.1, 0, 0, 55)
    input.PlaceholderText = "Digite sua key aqui"
    input.Text = ""
    input.Font = Enum.Font.SourceSans
    input.TextSize = 20
    input.TextColor3 = Color3.fromRGB(0, 0, 0)
    input.BackgroundColor3 = Color3.fromRGB(220, 220, 220)
    input.BorderSizePixel = 0
    input.Parent = frame

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.8, 0, 0, 32)
    button.Position = UDim2.new(0.1, 0, 0, 100)
    button.Text = "Confirmar"
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 20
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
    button.BorderSizePixel = 0
    button.AutoButtonColor = false
    button.Parent = frame

    -- Animação de entrada (fade-in + scale)
    frame.Size = UDim2.new(0, 0, 0, 0)
    frame.BackgroundTransparency = 1
    local tweenIn = TweenService:Create(frame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = UDim2.new(0, 350, 0, 140),
        BackgroundTransparency = 0
    })
    tweenIn:Play()

    -- Efeito hover no botão
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(0, 200, 0)}):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(0, 170, 0)}):Play()
    end)

    local keyValue = nil
    local keyReceived = false

    local function shakeFrame()
        -- Animação de shake para feedback de erro
        local origPos = frame.Position
        for i = 1, 4 do
            TweenService:Create(frame, TweenInfo.new(0.05), {Position = origPos + UDim2.new(0, (i%2==0 and 10 or -10), 0, 0)}):Play()
            task.wait(0.05)
        end
        TweenService:Create(frame, TweenInfo.new(0.05), {Position = origPos}):Play()
    end

    button.MouseButton1Click:Connect(function()
        local val = input.Text
        if val and #val > 0 then
            keyValue = val
            keyReceived = true
        else
            input.PlaceholderText = "Digite uma key válida!"
            TweenService:Create(input, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(255, 120, 120)}):Play()
            shakeFrame()
            task.wait(0.2)
            TweenService:Create(input, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(220, 220, 220)}):Play()
        end
    end)

    input.FocusLost:Connect(function(enter)
        if enter then
            button:Activate()
        end
    end)

    -- Espera até o usuário digitar e confirmar
    repeat task.wait() until keyReceived

    -- Animação de saída (fade-out + scale)
    local tweenOut = TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1
    })
    tweenOut:Play()
    tweenOut.Completed:Wait()

    screenGui:Destroy()
    self:saveKey(keyValue)
    return keyValue
end

-- Lista de keys fixas válidas
local VALID_KEYS = {
    ["EXEMPLO-KEY-123"] = true,
    ["MINHA-KEY-456"] = true,
    ["BRAZIL-HUB-789"] = true
    -- Adicione mais keys conforme necessário
}

-- Valida a key localmente usando a lista fixa
function KeyHandler:validateKey(key)
    if VALID_KEYS[key] then
        self.isValid = true
        return true
    end
    self.isValid = false
    return false
end

-- Fluxo principal: carrega, valida, solicita se necessário
function KeyHandler:requireValidKey()
    local key = self:loadKey()
    if not key then
        key = self:promptKey()
    end
    while not self:validateKey(key) do
        key = self:promptKey()
    end
    self:saveKey(key)
    self.key = key
    self.isValid = true
    return key
end

return KeyHandler 
