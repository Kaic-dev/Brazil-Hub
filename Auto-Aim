function AutoAim:enable()
    if self.enabled then return end
    self.enabled = true

    RemoteFunction.OnClientInvoke = function()
        local character = LocalPlayer.Character
        if not character then
            return {
                Hit     = Mouse.Hit,
                Target  = Mouse.Target,
                UnitRay = Mouse.UnitRay,
                X       = Mouse.X,
                Y       = Mouse.Y
            }
        end

        local equippedTool = character:FindFirstChildOfClass("Tool")
        local areaMarkers  = Workspace:FindFirstChild("AreaMarkers")
        if areaMarkers then
            Mouse.TargetFilter = areaMarkers:FindFirstChild("The Arena")
        end

        if equippedTool and self.toolNames[equippedTool.Name] then
            local targetNPC = self:getBestNPC(character)
            --print(targetNPC)

            if targetNPC then
                local npcHRP  = targetNPC:FindFirstChild("HumanoidRootPart")
                local npcHead = targetNPC:FindFirstChild("Head")
                if npcHead and npcHRP then
                    local projectileSpeed = 300 -- Ajuste conforme necessário
                    local attackDelay = 0
                    if equippedTool.Name == "Percutiens" then
                        attackDelay = 1.5
                    end

                    -- Distância inicial e cálculo do tempo para o projétil atingir o alvo
                    local distance = (npcHead.Position - character.HumanoidRootPart.Position).Magnitude
                    local timeToHit = distance / projectileSpeed
                    local totalTime = timeToHit + attackDelay

                    -- Predição iterativa para ajustar a posição prevista baseado na velocidade do NPC
                    local predictedPosition = npcHead.Position
                    for i = 1, 2 do
                        predictedPosition = npcHead.Position + npcHRP.Velocity * totalTime
                        distance = (predictedPosition - character.HumanoidRootPart.Position).Magnitude
                        timeToHit = distance / projectileSpeed
                        totalTime = timeToHit + attackDelay
                    end

                    -- Ajuste do ponto de impacto com base na arma
                    local hitPosition
                    if equippedTool.Name == "Percutiens" then
                        local direction = (predictedPosition - character.HumanoidRootPart.Position).Unit
                        hitPosition = predictedPosition + direction * math.random(self.studsBehindMin, self.studsBehindMax)
                    else
                        hitPosition = predictedPosition + Vector3.new(0, -2, 0)
                    end

                    -- Visualização do ponto de mira predito
                    local marker = Instance.new("Part")
                    marker.Anchored   = true
                    marker.CanCollide = false
                    marker.Size       = Vector3.new(0.5, 0.5, 0.5)
                    marker.Color      = Color3.new(0, 1, 0)
                    marker.Material   = Enum.Material.Neon
                    marker.Position   = hitPosition
                    marker.Parent     = Workspace
                    game:GetService("Debris"):AddItem(marker, 2)

                    return {
                        Hit     = CFrame.new(hitPosition),
                        Target  = targetNPC,
                        UnitRay = Mouse.UnitRay,
                        X       = Mouse.X,
                        Y       = Mouse.Y
                    }
                end
            end
        end

        -- Caso não encontre alvo ou ferramenta, retorna dados do mouse padrão
        return {
            Hit     = Mouse.Hit,
            Target  = Mouse.Target,
            UnitRay = Mouse.UnitRay,
            X       = Mouse.X,
            Y       = Mouse.Y
        }
    end
end
