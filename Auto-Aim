local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Debris = game:GetService("Debris")

local LIVE_FOLDER = Workspace:WaitForChild("Live")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local RemoteFunction
if game.PlaceId == 14341521240 then
    for _, obj in ipairs(ReplicatedStorage:GetChildren()) do
        if obj:IsA("RemoteFunction") and obj.Name == "" then
            RemoteFunction = obj
            break
        end
    end
else
    RemoteFunction = ReplicatedStorage:WaitForChild("Requests"):WaitForChild("GetMouse")
end

local AutoAim = {}
AutoAim.__index = AutoAim

local cos, deg, acos, random = math.cos, math.deg, math.acos, math.random
local Vector3new, Vector2new = Vector3.new, Vector2.new

function AutoAim.new()
    return setmetatable({
        enabled = false,
        maxRange = 200,
        timeToHit = 0.15,
        toolNames = {Fimbulvetr=true, Perflora=true, Armis=true, Grapple=true, Percutiens=true, Inferi=true},
        studsBehindMin = 20,
        studsBehindMax = 30,
        fovMax = 20,
        targetHistory = {}, -- Store target movement history
        historyMaxSize = 10, -- Maximum number of positions to track
        skillActivationTime = 0.5, -- Time it takes for skill to activate
        skillTravelTime = 0.15 -- Time for skill to travel to target
    }, AutoAim)
end

function AutoAim:setRange(range) self.maxRange = range end
function AutoAim:setTimeToHit(time) self.timeToHit = time end
function AutoAim:setFOV(fov) self.fovMax = fov end
function AutoAim:setStudsBehindRange(min, max) self.studsBehindMin, self.studsBehindMax = min, max end

--// Function: AutoAim:setSkillTiming
--// Description: Sets the timing parameters for skill activation and travel
--// Parameters: activationTime (number) - Time for skill to activate
--//             travelTime (number) - Time for skill to travel to target
function AutoAim:setSkillTiming(activationTime, travelTime)
    self.skillActivationTime = activationTime or 0.5
    self.skillTravelTime = travelTime or 0.15
end

--// Function: AutoAim:getTotalPredictionTime
--// Description: Calculates total time needed for prediction (activation + travel)
--// Parameters: toolName (string) - Name of the tool being used
--// Returns: number - Total prediction time
function AutoAim:getTotalPredictionTime(toolName)
    if toolName == "Percutiens" then
        -- Percutiens has longer activation time
        return self.skillActivationTime + self.skillTravelTime
    else
        -- Other tools use standard timing
        return self.skillActivationTime + self.skillTravelTime
    end
end

--// Function: AutoAim:updateTargetHistory
--// Description: Updates the movement history for a specific target
--// Parameters: target (Model) - The target to track
function AutoAim:updateTargetHistory(target)
    if not target then return end
    
    local hrp = target:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    
    local currentTime = tick()
    local currentPos = hrp.Position
    local currentVel = hrp.Velocity
    
    -- Initialize history for this target if it doesn't exist
    if not self.targetHistory[target] then
        self.targetHistory[target] = {}
    end
    
    local history = self.targetHistory[target]
    
    -- Add current position and velocity to history
    table.insert(history, {
        time = currentTime,
        position = currentPos,
        velocity = currentVel
    })
    
    -- Remove old entries to keep history size manageable
    while #history > self.historyMaxSize do
        table.remove(history, 1)
    end
end

--// Function: AutoAim:calculateMovementPrediction
--// Description: Calculates where the target will be based on movement patterns
--// Parameters: target (Model) - The target to predict
--//             predictionTime (number) - Time to predict ahead
--//             toolName (string) - Name of the tool for specific adjustments
--// Returns: Vector3 - Predicted position
function AutoAim:calculateMovementPrediction(target, predictionTime, toolName)
    if not target or not self.targetHistory[target] then
        -- Fallback to simple velocity prediction
        local hrp = target:FindFirstChild("HumanoidRootPart")
        if hrp then
            return hrp.Position + hrp.Velocity * predictionTime
        end
        return Vector3.new(0, 0, 0)
    end
    
    local history = self.targetHistory[target]
    if #history < 2 then
        -- Not enough history, use simple prediction
        local hrp = target:FindFirstChild("HumanoidRootPart")
        if hrp then
            return hrp.Position + hrp.Velocity * predictionTime
        end
        return Vector3.new(0, 0, 0)
    end
    
    -- Calculate average velocity from recent history
    local totalVelocity = Vector3.new(0, 0, 0)
    local velocityCount = 0
    
    for i = 2, #history do
        local timeDiff = history[i].time - history[i-1].time
        if timeDiff > 0 then
            local velocity = (history[i].position - history[i-1].position) / timeDiff
            totalVelocity = totalVelocity + velocity
            velocityCount = velocityCount + 1
        end
    end
    
    if velocityCount > 0 then
        local averageVelocity = totalVelocity / velocityCount
        local currentPos = history[#history].position
        
        -- Apply prediction with acceleration/deceleration simulation
        local predictedPos = currentPos + averageVelocity * predictionTime
        
        -- Add gravity effect (more pronounced for longer prediction times)
        local gravityEffect = predictionTime * 9.8 -- Gravity acceleration
        predictedPos = predictedPos + Vector3.new(0, -gravityEffect, 0)
        
        -- Add tool-specific adjustments
        if toolName == "Percutiens" then
            -- Percutiens might need more aggressive prediction due to longer activation
            predictedPos = predictedPos + averageVelocity * (predictionTime * 0.1) -- Extra prediction
        elseif toolName == "Grapple" then
            -- Grapple might need less prediction due to instant travel
            predictedPos = predictedPos + averageVelocity * (predictionTime * 0.05)
        end
        
        return predictedPos
    else
        -- Fallback to current velocity
        local hrp = target:FindFirstChild("HumanoidRootPart")
        if hrp then
            return hrp.Position + hrp.Velocity * predictionTime
        end
        return Vector3.new(0, 0, 0)
    end
end

--// Function: AutoAim:cleanupTargetHistory
--// Description: Removes history for targets that no longer exist
function AutoAim:cleanupTargetHistory()
    for target, _ in pairs(self.targetHistory) do
        if not target.Parent then
            self.targetHistory[target] = nil
        end
    end
end

function AutoAim:setTools(toolTable)
    if type(toolTable) == "table" then
        if toolTable[1] then
            local hash = {}
            for i = 1, #toolTable do hash[toolTable[i]] = true end
            self.toolNames = hash
        else
            self.toolNames = toolTable
        end
    end
end

function AutoAim:getBestNPC(localChar)
    local hrp = localChar.HumanoidRootPart
    if not hrp then return end
    
    local camera = Workspace.CurrentCamera
    local mouseRay = camera:ScreenPointToRay(Mouse.X, Mouse.Y)
    local mouseDir = mouseRay.Direction
    local camPos = camera.CFrame.Position
    local fovHalf = self.fovMax * 0.5
    
    local closestNPC, minAngle = nil, fovHalf
    local children = LIVE_FOLDER:GetChildren()
    
    for i = 1, #children do
        local model = children[i]
        if model ~= localChar then
            local head = model:FindFirstChild("Head")
            if head and not model:FindFirstChild("Knocked") then
                local humanoid = model:FindFirstChild("Humanoid")
                local headPos = head.Position
                local _, onScreen = camera:WorldToViewportPoint(headPos)
                if onScreen then
                    local npcDir = (headPos - camPos).Unit
                    local angle = deg(acos(mouseDir:Dot(npcDir)))
                    if angle < minAngle then
                        closestNPC = model
                        minAngle = angle
                    end
                end
            end
        end
    end
    
    return closestNPC
end

function AutoAim:enable()
    if self.enabled then return end
    self.enabled = true
    
    -- Start periodic cleanup of target history
    local RunService = game:GetService("RunService")
    local lastCleanup = tick()
    
    RunService.Heartbeat:Connect(function()
        local currentTime = tick()
        if currentTime - lastCleanup > 5 then -- Cleanup every 5 seconds
            self:cleanupTargetHistory()
            lastCleanup = currentTime
        end
    end)
    
    RemoteFunction.OnClientInvoke = function()
        local character = LocalPlayer.Character
        if not character then
            return {Hit=Mouse.Hit, Target=Mouse.Target, UnitRay=Mouse.UnitRay, X=Mouse.X, Y=Mouse.Y}
        end

        local equippedTool = character:FindFirstChildOfClass("Tool")
        local areaMarkers = Workspace:FindFirstChild("AreaMarkers")
        if areaMarkers then
            Mouse.TargetFilter = areaMarkers:FindFirstChild("The Arena")
        end

        if equippedTool and self.toolNames[equippedTool.Name] then
            local targetNPC = self:getBestNPC(character)
            print(targetNPC)
            if targetNPC then
                local npcHRP = targetNPC:FindFirstChild("HumanoidRootPart")
                local npcHead = targetNPC:FindFirstChild("Head")
                if npcHead and npcHRP then
                    -- Update target movement history
                    self:updateTargetHistory(targetNPC)
                    
                    -- Calculate total prediction time including skill activation
                    local totalPredictionTime = self:getTotalPredictionTime(equippedTool.Name)
                    
                    local hitPosition
                    if equippedTool.Name == "Percutiens" then
                        -- Use movement-based prediction for Percutiens with full timing
                        local predictedPosition = self:calculateMovementPrediction(targetNPC, totalPredictionTime, equippedTool.Name)
                        local direction = (npcHRP.Position - character.HumanoidRootPart.Position).Unit
                        hitPosition = predictedPosition + direction * random(self.studsBehindMin, self.studsBehindMax)
                    else
                        -- Use movement-based prediction for other tools with full timing
                        hitPosition = self:calculateMovementPrediction(targetNPC, totalPredictionTime, equippedTool.Name)
                    end

                    -- Create prediction marker (green) - Final target position
                    local marker = Instance.new("Part")
                    marker.Anchored = true
                    marker.CanCollide = false
                    marker.Size = Vector3new(0.5, 0.5, 0.5)
                    marker.Color = Color3.new(0, 1, 0)
                    marker.Material = Enum.Material.Neon
                    marker.Position = hitPosition
                    marker.Parent = Workspace
                    Debris:AddItem(marker, 2)
                    
                    -- Create current position marker (red) for comparison
                    local currentMarker = Instance.new("Part")
                    currentMarker.Anchored = true
                    currentMarker.CanCollide = false
                    currentMarker.Size = Vector3new(0.3, 0.3, 0.3)
                    currentMarker.Color = Color3.new(1, 0, 0)
                    currentMarker.Material = Enum.Material.Neon
                    currentMarker.Position = npcHead.Position
                    currentMarker.Parent = Workspace
                    Debris:AddItem(currentMarker, 2)
                    
                    -- Create activation time marker (yellow) - Where target will be when skill activates
                    local activationPosition = self:calculateMovementPrediction(targetNPC, self.skillActivationTime, equippedTool.Name)
                    local activationMarker = Instance.new("Part")
                    activationMarker.Anchored = true
                    activationMarker.CanCollide = false
                    activationMarker.Size = Vector3new(0.4, 0.4, 0.4)
                    activationMarker.Color = Color3.new(1, 1, 0) -- Yellow
                    activationMarker.Material = Enum.Material.Neon
                    activationMarker.Position = activationPosition
                    activationMarker.Parent = Workspace
                    Debris:AddItem(activationMarker, 2)

                    return {Hit=CFrame.new(hitPosition), Target=targetNPC, UnitRay=Mouse.UnitRay, X=Mouse.X, Y=Mouse.Y}
                end
            end
        end

        return {Hit=Mouse.Hit, Target=Mouse.Target, UnitRay=Mouse.UnitRay, X=Mouse.X, Y=Mouse.Y}
    end
end

function AutoAim:disable()
    if not self.enabled then return end
    self.enabled = false
    RemoteFunction.OnClientInvoke = nil
end

return AutoAim
