-- betterleaderboard.lua
-- Handler OOP para criar um leaderboard customizado
-- Uso: local BetterLeaderboard = require(path); local leaderboard = BetterLeaderboard.new(); leaderboard:enable()/leaderboard:disable()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Carrega o módulo Utils com tratamento de erro
local Utils, utils
local success, err = pcall(function()
    Utils = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/refs/heads/main/Utils"))()
    utils = Utils.new()
end)

if not success then
    warn("Falha ao carregar Utils: " .. tostring(err))
    -- Criar um utils mock para evitar erros
    utils = {
        getPlayerPrestigeData = function(self, player)
            return {level = 0}
        end,
        getPlayerRogueDisplay = function(self, player)
            return player.Name
        end
    }
end

-- Cache de cores para evitar criar novos objetos
local COLORS = {
    WHITE = Color3.new(1, 1, 1),
    GRAY = Color3.new(0.243137, 0.243137, 0.243137),
    BLACK = Color3.new(0, 0, 0),
    GREEN = Color3.new(49/255, 197/255, 26/255)
}

local BetterLeaderboard = {}
BetterLeaderboard.__index = BetterLeaderboard

function BetterLeaderboard.new()
    local self = setmetatable({}, BetterLeaderboard)
    self.enabled = false
    self.connections = {}
    self.originalLeaderboardGui = nil
    self.customLeaderboardGui = nil
    self.characterAddedConnection = nil
    self.characterRemovingConnection = nil
    self.playerAddedConnection = nil
    self.playerRemovingConnection = nil
    self.updateScheduled = false
    self.currentCameraTarget = nil
    self.originalCameraSubject = nil
    self.cameraConnections = {}
    self.playerFrames = {}
    self.lastColorUpdate = 0
    self.colorUpdateInterval = 1
    self.scrollingFrame = nil
    return self
end

function BetterLeaderboard:getPlayerGui()
    local player = Players.LocalPlayer
    if not player then 
        warn("LocalPlayer não encontrado")
        return nil 
    end
    
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if not playerGui then
        -- Aguarda o PlayerGui ser criado
        local success, result = pcall(function()
            return player:WaitForChild("PlayerGui", 5)
        end)
        if success then
            playerGui = result
        else
            warn("Timeout ao aguardar PlayerGui")
            return nil
        end
    end
    
    return playerGui
end

function BetterLeaderboard:findOriginalLeaderboardGui()
    local playerGui = self:getPlayerGui()
    if not playerGui then return nil end
    
    return playerGui:FindFirstChild("LeaderboardGui")
end

function BetterLeaderboard:isCustomLeaderboardValid()
    return self.customLeaderboardGui and 
           self.customLeaderboardGui.Parent and 
           self.customLeaderboardGui:FindFirstChild("Leaderboard") and 
           self.customLeaderboardGui.Leaderboard:FindFirstChild("ScrollingFrame")
end

function BetterLeaderboard:scheduleUpdate()
    if self.updateScheduled then return end
    self.updateScheduled = true
    task.spawn(function()
        task.wait(0.1)
        if self.enabled then
            self:updatePlayerList()
        end
        self.updateScheduled = false
    end)
end

function BetterLeaderboard:switchCameraToPlayer(player)
    local camera = workspace.CurrentCamera
    if not camera then 
        warn("CurrentCamera não encontrada")
        return 
    end
    
    -- Validar se o player ainda existe
    if not player or not player.Parent or not player:IsDescendantOf(Players) then
        warn("Player inválido para troca de câmera")
        return
    end
    
    if self.currentCameraTarget == player then
        self:resetCameraToLocalPlayer()
        return
    end
    
    if not self.originalCameraSubject then
        self.originalCameraSubject = camera.CameraSubject
    end
    
    if not player.Character then 
        warn("Player não possui Character")
        return 
    end
    
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if not humanoid then 
        warn("Humanoid não encontrado no Character do player")
        return 
    end
    
    self.currentCameraTarget = player
    camera.CameraSubject = humanoid
    
    -- Limpar conexões antigas antes de criar nova
    for i = #self.cameraConnections, 1, -1 do
        local connection = self.cameraConnections[i]
        if connection and connection.Connected then
            connection:Disconnect()
        end
        table.remove(self.cameraConnections, i)
    end
    
    local connection = player.CharacterRemoving:Connect(function()
        if self.currentCameraTarget == player then
            self:resetCameraToLocalPlayer()
        end
    end)
    table.insert(self.cameraConnections, connection)
end

function BetterLeaderboard:resetCameraToLocalPlayer()
    local camera = workspace.CurrentCamera
    if not camera then return end
    
    if self.originalCameraSubject and self.originalCameraSubject.Parent then
        camera.CameraSubject = self.originalCameraSubject
    else
        local localPlayer = Players.LocalPlayer
        if localPlayer and localPlayer.Character then
            local humanoid = localPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                camera.CameraSubject = humanoid
            end
        end
    end
    
    self.currentCameraTarget = nil
    
    -- Limpar todas as conexões da câmera
    for i = #self.cameraConnections, 1, -1 do
        local connection = self.cameraConnections[i]
        if connection and connection.Connected then
            connection:Disconnect()
        end
        table.remove(self.cameraConnections, i)
    end
end

function BetterLeaderboard:createCustomLeaderboard()
    -- Destruir GUI existente se houver
    if self.customLeaderboardGui and self.customLeaderboardGui.Parent then
        self.customLeaderboardGui:Destroy()
        self.customLeaderboardGui = nil
    end
    
    local playerGui = self:getPlayerGui()
    if not playerGui then
        warn("Não foi possível obter PlayerGui para criar leaderboard customizado")
        return nil, nil
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BetterLeaderboardGui"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local leaderboardButton = Instance.new("ImageButton")
    leaderboardButton.Name = "Leaderboard"
    leaderboardButton.ScaleType = Enum.ScaleType.Slice
    leaderboardButton.ImageTransparency = 0.8
    leaderboardButton.Size = UDim2.new(0.05, 150, 0, 240)
    leaderboardButton.AnchorPoint = Vector2.new(1, 0)
    leaderboardButton.Image = "rbxassetid://1327087642"
    leaderboardButton.BackgroundTransparency = 1
    leaderboardButton.Position = UDim2.new(1, 0, 0, 0)
    leaderboardButton.BackgroundColor3 = COLORS.WHITE
    leaderboardButton.BorderSizePixel = 0
    leaderboardButton.SliceCenter = Rect.new(Vector2.new(20, 20), Vector2.new(190, 190))

    local scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.ScrollBarImageColor3 = COLORS.GREEN
    scrollingFrame.MidImage = "rbxassetid://3515608813"
    scrollingFrame.Active = true
    scrollingFrame.ScrollBarThickness = 10
    scrollingFrame.BackgroundTransparency = 1
    scrollingFrame.BackgroundColor3 = COLORS.WHITE
    scrollingFrame.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    scrollingFrame.Position = UDim2.new(-0.07, 0, 0.04, 0)
    scrollingFrame.TopImage = "rbxassetid://3515609176"
    scrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    scrollingFrame.Size = UDim2.new(1.05, -10, 1, -20)
    scrollingFrame.BottomImage = "rbxassetid://3515608177"
    scrollingFrame.BorderSizePixel = 0
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollingFrame.Name = "ScrollingFrame"

    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 2)
    
    -- Definir parents na ordem correta
    listLayout.Parent = scrollingFrame
    scrollingFrame.Parent = leaderboardButton
    leaderboardButton.Parent = screenGui
    
    -- Só adicionar o ScreenGui ao PlayerGui no final
    screenGui.Parent = playerGui

    -- Update canvas size when content changes
    local canvasConnection = listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        if scrollingFrame and scrollingFrame.Parent then
            scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 10)
        end
    end)
    
    -- Armazenar a conexão para limpeza posterior
    self.connections.canvasUpdate = canvasConnection
    
    self.scrollingFrame = scrollingFrame
    self.customLeaderboardGui = screenGui
    
    return screenGui, scrollingFrame
end

function BetterLeaderboard:createPlayerFrame(player)
    if not player or not player:IsDescendantOf(Players) then 
        warn("Player inválido para criação de frame")
        return nil
    end
    
    local frame = Instance.new("Frame")
    frame.BackgroundTransparency = 1
    frame.BorderColor3 = COLORS.BLACK
    frame.SizeConstraint = Enum.SizeConstraint.RelativeXX
    frame.Size = UDim2.new(1, 0, 0, 25)
    frame.BorderSizePixel = 0
    frame.BackgroundColor3 = COLORS.WHITE

    local hasCharacter = player.Character ~= nil
    local textColor = hasCharacter and COLORS.WHITE or COLORS.GRAY

    local prestigeData = utils:getPlayerPrestigeData(player)
    local prestigeLevel = prestigeData.level or 0

    local prestigeButton = Instance.new("TextButton")
    prestigeButton.Font = Enum.Font.SourceSansSemibold
    prestigeButton.TextColor3 = textColor
    prestigeButton.TextTransparency = 0.2
    prestigeButton.Text = "#" .. prestigeLevel
    prestigeButton.TextStrokeTransparency = 0.5
    prestigeButton.Size = UDim2.new(0, 35, 1, 0)
    prestigeButton.BackgroundTransparency = 1
    prestigeButton.TextXAlignment = Enum.TextXAlignment.Left
    prestigeButton.Name = "Prestige"
    prestigeButton.TextSize = 16
    prestigeButton.BorderSizePixel = 0
    prestigeButton.Visible = prestigeLevel > 0

    local playerLabel = Instance.new("TextButton")
    playerLabel.Font = Enum.Font.SourceSansSemibold
    playerLabel.TextColor3 = textColor
    playerLabel.BorderColor3 = COLORS.BLACK
    playerLabel.Text = utils:getPlayerRogueDisplay(player) or player.Name
    playerLabel.TextXAlignment = Enum.TextXAlignment.Left
    playerLabel.TextStrokeTransparency = 0.5
    playerLabel.Size = UDim2.new(1, -35, 1, 0)
    playerLabel.BackgroundTransparency = 1
    playerLabel.Position = UDim2.new(0, 35, 0, 0)
    playerLabel.TextSize = 18
    playerLabel.Name = "PlayerLabel"
    playerLabel.BorderSizePixel = 0
    playerLabel.TextTruncate = Enum.TextTruncate.AtEnd

    local function onPlayerLabelClick()
        if self.enabled and hasCharacter and player:IsDescendantOf(Players) then
            self:switchCameraToPlayer(player)
        end
    end

    -- Definir parents na ordem correta
    prestigeButton.Parent = frame
    playerLabel.Parent = frame

    -- Conectar eventos apenas depois que os elementos estão parented
    local labelConnection = playerLabel.MouseButton1Click:Connect(onPlayerLabelClick)
    local frameConnection = frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and hasCharacter then
            onPlayerLabelClick()
        end
    end)

    -- Armazenar conexões no sistema de gerenciamento
    local frameKey = "frame_" .. player.UserId
    if not self.connections[frameKey] then
        self.connections[frameKey] = {}
    end
    self.connections[frameKey].labelClick = labelConnection
    self.connections[frameKey].frameInput = frameConnection
    
    -- Usar ObjectValue para referenciar o player de forma segura
    local playerValue = Instance.new("ObjectValue")
    playerValue.Name = "PlayerReference"
    playerValue.Value = player
    playerValue.Parent = frame
    
    -- Usar BoolValue para hasCharacter
    local hasCharacterValue = Instance.new("BoolValue")
    hasCharacterValue.Name = "HasCharacter"
    hasCharacterValue.Value = hasCharacter
    hasCharacterValue.Parent = frame
    
    return frame
end

function BetterLeaderboard:updatePlayerList()
    if not self:isCustomLeaderboardValid() then 
        warn("Custom leaderboard inválido")
        return 
    end
    
    local scrollingFrame = self.scrollingFrame
    if not scrollingFrame or not scrollingFrame.Parent then 
        warn("ScrollingFrame inválido")
        return 
    end
    
    -- Limpar frames existentes com segurança
    for player, frame in pairs(self.playerFrames) do
        if frame then
            -- Limpar conexões do frame usando o sistema de gerenciamento
            local frameKey = "frame_" .. player.UserId
            if self.connections[frameKey] then
                for _, connection in pairs(self.connections[frameKey]) do
                    if connection and connection.Connected then
                        connection:Disconnect()
                    end
                end
                self.connections[frameKey] = nil
            end
            
            if frame.Parent then
                frame:Destroy()
            end
        end
    end
    self.playerFrames = {}
    
    -- Criar frames para todos os players
    local playerList = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player and player:IsDescendantOf(Players) then
            table.insert(playerList, player)
        end
    end
    
    -- Sort players by prestige level (highest first)
    table.sort(playerList, function(a, b)
        local prestigeA = utils:getPlayerPrestigeData(a).level or 0
        local prestigeB = utils:getPlayerPrestigeData(b).level or 0
        if prestigeA == prestigeB then
            return a.Name < b.Name -- Alphabetical if same prestige
        end
        return prestigeA > prestigeB
    end)
    
    -- Criar frames na ordem
    for i, player in ipairs(playerList) do
        local frame = self:createPlayerFrame(player)
        if frame then
            frame.LayoutOrder = i
            frame.Parent = scrollingFrame
            self.playerFrames[player] = frame
        end
    end
end

function BetterLeaderboard:updatePlayerColors()
    local currentTime = tick()
    if currentTime - self.lastColorUpdate < self.colorUpdateInterval then return end
    self.lastColorUpdate = currentTime
    
    for player, frame in pairs(self.playerFrames) do
        if frame and frame.Parent and player and player:IsDescendantOf(Players) then
            -- Obter valores usando os ObjectValue/BoolValue
            local playerRef = frame:FindFirstChild("PlayerReference")
            local hasCharacterRef = frame:FindFirstChild("HasCharacter")
            
            if playerRef and playerRef.Value == player then
                local hasCharacter = player.Character ~= nil
                local textColor = hasCharacter and COLORS.WHITE or COLORS.GRAY
                
                local playerLabel = frame:FindFirstChild("PlayerLabel")
                if playerLabel then
                    playerLabel.TextColor3 = textColor
                end
                
                local prestigeButton = frame:FindFirstChild("Prestige")
                if prestigeButton then
                    prestigeButton.TextColor3 = textColor
                end
                
                -- Atualizar BoolValue
                if hasCharacterRef then
                    hasCharacterRef.Value = hasCharacter
                end
            end
        end
    end
end

function BetterLeaderboard:connectPlayerEvents()
    -- Desconectar conexões existentes
    for key, connection in pairs(self.connections) do
        if connection and connection.Connected then
            connection:Disconnect()
        end
    end
    self.connections = {}
    
    -- Player added/removed events
    self.connections.playerAdded = Players.PlayerAdded:Connect(function(player)
        if not player then return end
        
        self:scheduleUpdate()
        
        -- Connect character events for this player
        local function onCharacterAdded()
            task.wait(0.1) -- Pequena espera para garantir que tudo esteja carregado
            self:scheduleUpdate()
        end
        
        local function onCharacterRemoving()
            if self.currentCameraTarget == player then
                self:resetCameraToLocalPlayer()
            end
            self:scheduleUpdate()
        end
        
        if player.Character then
            onCharacterAdded()
        end
        
        self.connections["characterAdded_" .. player.UserId] = player.CharacterAdded:Connect(onCharacterAdded)
        self.connections["characterRemoving_" .. player.UserId] = player.CharacterRemoving:Connect(onCharacterRemoving)
    end)
    
    self.connections.playerRemoving = Players.PlayerRemoving:Connect(function(player)
        if not player then return end
        
        if self.currentCameraTarget == player then
            self:resetCameraToLocalPlayer()
        end
        
        -- Limpar frame do player
        if self.playerFrames[player] then
            local frame = self.playerFrames[player]
            
            -- Limpar conexões do frame usando o sistema de gerenciamento
            local frameKey = "frame_" .. player.UserId
            if self.connections[frameKey] then
                for _, connection in pairs(self.connections[frameKey]) do
                    if connection and connection.Connected then
                        connection:Disconnect()
                    end
                end
                self.connections[frameKey] = nil
            end
            
            self.playerFrames[player] = nil
        end
        
        -- Limpar conexões específicas do player
        if self.connections["characterAdded_" .. player.UserId] then
            self.connections["characterAdded_" .. player.UserId]:Disconnect()
            self.connections["characterAdded_" .. player.UserId] = nil
        end
        if self.connections["characterRemoving_" .. player.UserId] then
            self.connections["characterRemoving_" .. player.UserId]:Disconnect()
            self.connections["characterRemoving_" .. player.UserId] = nil
        end
        
        self:scheduleUpdate()
    end)
    
    -- Conectar eventos para players existentes
    for _, player in pairs(Players:GetPlayers()) do
        if player and player:IsDescendantOf(Players) then
            local function onCharacterAdded()
                task.wait(0.1)
                self:scheduleUpdate()
            end
            
            local function onCharacterRemoving()
                if self.currentCameraTarget == player then
                    self:resetCameraToLocalPlayer()
                end
                self:scheduleUpdate()
            end
            
            self.connections["characterAdded_" .. player.UserId] = player.CharacterAdded:Connect(onCharacterAdded)
            self.connections["characterRemoving_" .. player.UserId] = player.CharacterRemoving:Connect(onCharacterRemoving)
        end
    end
    
    -- Update colors periodically
    self.connections.colorUpdate = RunService.Heartbeat:Connect(function()
        if self.enabled then
            self:updatePlayerColors()
        end
    end)
end

function BetterLeaderboard:hideOriginalLeaderboard()
    self.originalLeaderboardGui = self:findOriginalLeaderboardGui()
    if self.originalLeaderboardGui then
        self.originalLeaderboardGui.Enabled = false
    end
end

function BetterLeaderboard:showOriginalLeaderboard()
    if self.originalLeaderboardGui and self.originalLeaderboardGui.Parent then
        self.originalLeaderboardGui.Enabled = true
    end
end

function BetterLeaderboard:enable()
    if self.enabled then return end
    
    self.enabled = true
    
    -- Hide original leaderboard
    self:hideOriginalLeaderboard()
    
    -- Create custom leaderboard
    local success, err = pcall(function()
        self.customLeaderboardGui, self.scrollingFrame = self:createCustomLeaderboard()
    end)
    
    if not success then
        warn("Erro ao criar leaderboard customizado: " .. tostring(err))
        self.enabled = false
        return
    end
    
    if not self.customLeaderboardGui then
        warn("Falha ao criar GUI customizada")
        self.enabled = false
        return
    end
    
    -- Connect events
    self:connectPlayerEvents()
    
    -- Initial update
    self:scheduleUpdate()
    
    print("BetterLeaderboard enabled")
end

function BetterLeaderboard:disable()
    if not self.enabled then return end
    
    self.enabled = false
    
    -- Desconectar todas as conexões
    for key, connection in pairs(self.connections) do
        if connection and connection.Connected then
            connection:Disconnect()
        end
    end
    self.connections = {}
    
    -- Reset camera
    self:resetCameraToLocalPlayer()
    
    -- Limpar frames de players
    for player, frame in pairs(self.playerFrames) do
        if frame then
            -- Limpar conexões do frame usando o sistema de gerenciamento
            local frameKey = "frame_" .. player.UserId
            if self.connections[frameKey] then
                for _, connection in pairs(self.connections[frameKey]) do
                    if connection and connection.Connected then
                        connection:Disconnect()
                    end
                end
                self.connections[frameKey] = nil
            end
            
            if frame.Parent then
                frame:Destroy()
            end
        end
    end
    self.playerFrames = {}
    
    -- Limpar GUI
    if self.customLeaderboardGui and self.customLeaderboardGui.Parent then
        self.customLeaderboardGui:Destroy()
    end
    self.customLeaderboardGui = nil
    self.scrollingFrame = nil
    
    -- Mostrar leaderboard original
    self:showOriginalLeaderboard()
    
    print("BetterLeaderboard disabled")
end

function BetterLeaderboard:toggle()
    if self.enabled then
        self:disable()
    else
        self:enable()
    end
end

function BetterLeaderboard:destroy()
    self:disable()
    -- Não definir self como nil aqui, pois isso não funciona em Lua
end

return BetterLeaderboard
