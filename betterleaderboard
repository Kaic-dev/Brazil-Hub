local Players = game:GetService("Players")

local C = {
    SIZE = UDim2.new(0.05, 150, 0, 240),
    FRAME_SIZE = UDim2.new(1, 0, 0.1, 0),
    SCROLL_SIZE = UDim2.new(1.05, -10, 1, -20),
    LABEL_SIZE = UDim2.new(1.5, 0, 0, 20),
    PRESTIGE_SIZE = UDim2.new(0, 35, 0, 20),
    WHITE = Color3.new(1, 1, 1),
    GRAY = Color3.fromRGB(180, 180, 180),
    GREEN = Color3.new(0.96, 0.77, 0.51),
    BLUE = Color3.fromRGB(80, 180, 255),
    DARK_GRAY = Color3.fromRGB(120, 120, 120),
    LB_IMG = "rbxassetid://1327087642",
    SCROLL_MID = "rbxassetid://3515608813",
    SCROLL_TOP = "rbxassetid://3515609176",
    SCROLL_BOT = "rbxassetid://3515608177"
}

local utils
pcall(function()
    utils = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/refs/heads/main/UtilsService"))()
    if utils then utils = utils.new() end
end)

local BetterLeaderboard = {}
BetterLeaderboard.__index = BetterLeaderboard

function BetterLeaderboard.new()
    return setmetatable({
        enabled = false,
        gui = nil,
        scroll = nil,
        playerData = {},
        playerCount = 0,
        target = nil,
        connCache = {}
    }, BetterLeaderboard)
end

function BetterLeaderboard:_createGUI()
    local gui = Instance.new("ScreenGui")
    gui.Name = "BetterLeaderboardGui"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local lb = Instance.new("ImageButton")
    lb.Name = "Leaderboard"
    lb.ScaleType = Enum.ScaleType.Slice
    lb.ImageTransparency = 0.8
    lb.Size = C.SIZE
    lb.AnchorPoint = Vector2.new(1, 0)
    lb.Image = C.LB_IMG
    lb.BackgroundTransparency = 1
    lb.Position = UDim2.new(1, 0, 0, 0)
    lb.BorderSizePixel = 0
    lb.SliceCenter = Rect.new(20, 20, 190, 190)
    lb.Parent = gui
    
    local scroll = Instance.new("ScrollingFrame")
    scroll.Name = "ScrollingFrame"
    scroll.ScrollBarImageColor3 = C.GREEN
    scroll.MidImage = C.SCROLL_MID
    scroll.TopImage = C.SCROLL_TOP
    scroll.BottomImage = C.SCROLL_BOT
    scroll.Active = true
    scroll.ScrollBarThickness = 10
    scroll.BackgroundTransparency = 1
    scroll.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    scroll.Position = UDim2.new(-0.07, 0, 0.04, 0)
    scroll.ScrollingDirection = Enum.ScrollingDirection.Y
    scroll.Size = C.SCROLL_SIZE
    scroll.BorderSizePixel = 0
    scroll.CanvasSize = UDim2.new(0, 0, 0, 220)
    scroll.Parent = lb
    
    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = scroll
    
    return gui, scroll
end

function BetterLeaderboard:_hideOriginal()
    local pg = Players.LocalPlayer:WaitForChild("PlayerGui", 5)
    if not pg then return end
    
    local function hide()
        local orig = pg:FindFirstChild("LeaderboardGui")
        if orig then
            orig.Enabled = false
            local conn = self.connCache.lbEnabled
            if conn then conn:Disconnect() end
            self.connCache.lbEnabled = orig:GetPropertyChangedSignal("Enabled"):Connect(function()
                if self.enabled then orig.Enabled = false end
            end)
        end
    end
    
    hide()
    local conn = self.connCache.lbAdded
    if conn then conn:Disconnect() end
    self.connCache.lbAdded = pg.ChildAdded:Connect(function(c)
        if c.Name == "LeaderboardGui" then hide() end
    end)
end

function BetterLeaderboard:_showOriginal()
    local pg = Players.LocalPlayer:FindFirstChildOfClass("PlayerGui")
    if pg then
        local orig = pg:FindFirstChild("LeaderboardGui")
        if orig then orig.Enabled = true end
    end
end

function BetterLeaderboard:_updateColors()
    if not self.scroll then return end
    local targetUid = self.target and self.target.UserId
    
    for uid, data in pairs(self.playerData) do
        if data.label then
            if targetUid == uid then
                data.label.TextColor3 = C.BLUE
            elseif data.hasCharacter then
                data.label.TextColor3 = C.WHITE
            else
                data.label.TextColor3 = C.DARK_GRAY
            end
        end
    end
end

function BetterLeaderboard:_toggleCamera(p)
    local cam = workspace.CurrentCamera
    if not cam then return end
    
    if self.target == p then
        local lp = Players.LocalPlayer
        if lp and lp.Character then
            local h = lp.Character:FindFirstChild("Humanoid")
            if h then cam.CameraSubject = h end
        end
        self.target = nil
    else
        if p and p.Character then
            local h = p.Character:FindFirstChild("Humanoid")
            if h then
                cam.CameraSubject = h
                self.target = p
            end
        end
    end
    self:_updateColors()
end

function BetterLeaderboard:_updateCanvas()
    if not self.scroll then return end
    self.scroll.CanvasSize = UDim2.new(0, 0, 0, math.max(self.playerCount * 28.69, 220))
end

function BetterLeaderboard:addPlayer(p)
    if not self.scroll or self.playerData[p.UserId] then return end
    
    local prestige = (utils and utils.getPlayerPrestigeData and utils:getPlayerPrestigeData(p) or {}).level or 0
    local rogue = utils and utils.getPlayerRogueDisplay and utils:getPlayerRogueDisplay(p) or nil
    local hasCharacter = p.Character ~= nil
    
    local frame = Instance.new("Frame")
    frame.BackgroundTransparency = 1
    frame.Size = C.FRAME_SIZE
    frame.BorderSizePixel = 0
    frame.Parent = self.scroll
    
    local pb = Instance.new("TextButton")
    pb.Name = "Prestige"
    pb.FontSize = Enum.FontSize.Size18
    pb.TextColor3 = C.WHITE
    pb.TextTransparency = 0.2
    pb.Text = "#" .. (prestige > 0 and prestige or "???")
    pb.TextStrokeTransparency = 0.5
    pb.Size = C.PRESTIGE_SIZE
    pb.Font = Enum.Font.SourceSansSemibold
    pb.BackgroundTransparency = 1
    pb.TextXAlignment = Enum.TextXAlignment.Left
    pb.TextSize = 16
    pb.BorderSizePixel = 0
    pb.Visible = prestige > 0
    pb.Parent = frame
    
    local label = Instance.new("TextButton")
    label.Name = "PlayerLabel"
    label.FontSize = Enum.FontSize.Size18
    label.TextColor3 = hasCharacter and C.WHITE or C.DARK_GRAY
    label.Text = rogue or "Loading"
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextStrokeTransparency = 0.5
    label.Size = C.LABEL_SIZE
    label.Font = Enum.Font.SourceSansSemibold
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 30, 0, 0)
    label.TextSize = 18
    label.BorderSizePixel = 0
    label.Parent = frame
    
    local data = {
        player = p,
        frame = frame,
        label = label,
        prestige = pb,
        hasCharacter = hasCharacter,
        rogue = rogue,
        conns = {}
    }
    
    data.conns[1] = label.MouseButton2Click:Connect(function()
        self:_toggleCamera(p)
    end)
    
    data.conns[2] = label.MouseEnter:Connect(function()
        label.TextColor3 = C.GRAY
        label.Text = p.Name
    end)
    
    data.conns[3] = label.MouseLeave:Connect(function()
        if self.target == p then
            label.TextColor3 = C.BLUE
        elseif data.hasCharacter then
            label.TextColor3 = C.WHITE
        else
            label.TextColor3 = C.DARK_GRAY
        end
        label.Text = data.rogue or "Loading"
    end)
    
    data.conns[4] = p.CharacterAdded:Connect(function()
        data.hasCharacter = true
        label.TextColor3 = self.target == p and C.BLUE or C.WHITE
    end)
    
    data.conns[5] = p.CharacterRemoving:Connect(function()
        data.hasCharacter = false
        label.TextColor3 = self.target == p and C.BLUE or C.DARK_GRAY
    end)
    
    self.playerData[p.UserId] = data
    self.playerCount = self.playerCount + 1
    
    if not rogue and utils and utils.getPlayerRogueDisplay then
        task.spawn(function()
            while self.playerData[p.UserId] and self.playerData[p.UserId].frame.Parent do
                local d = utils:getPlayerRogueDisplay(p)
                if d and #d > 0 then
                    data.rogue = d
                    label.Text = d
                    break
                end
                task.wait(1)
            end
        end)
    end
    
    self:_updateCanvas()
end

function BetterLeaderboard:removePlayer(p)
    local data = self.playerData[p.UserId]
    if not data then return end
    
    if data.frame then
        data.frame:Destroy()
    end
    
    for _, c in ipairs(data.conns) do
        if c then c:Disconnect() end
    end
    
    if self.target == p then
        self.target = nil
    end
    
    self.playerData[p.UserId] = nil
    self.playerCount = self.playerCount - 1
    
    self:_updateCanvas()
end

function BetterLeaderboard:enable()
    if self.enabled then return end
    
    local pg = Players.LocalPlayer:FindFirstChildOfClass("PlayerGui")
    if not pg then return end
    
    self.enabled = true
    self:_hideOriginal()
    
    self.gui, self.scroll = self:_createGUI()
    self.gui.Parent = pg
    
    for _, p in ipairs(Players:GetPlayers()) do
        self:addPlayer(p)
    end
    
    self.connCache.playerAdded = Players.PlayerAdded:Connect(function(p)
        self:addPlayer(p)
    end)
    
    self.connCache.playerRemoving = Players.PlayerRemoving:Connect(function(p)
        self:removePlayer(p)
    end)
end

function BetterLeaderboard:disable()
    if not self.enabled then return end
    
    self.enabled = false
    
    for _, data in pairs(self.playerData) do
        if data.frame then
            data.frame:Destroy()
        end
        for _, c in ipairs(data.conns) do
            if c then c:Disconnect() end
        end
    end
    
    for _, conn in pairs(self.connCache) do
        if conn then conn:Disconnect() end
    end
    
    self.playerData = {}
    self.connCache = {}
    self.playerCount = 0
    self.target = nil
    
    if self.gui then
        self.gui:Destroy()
        self.gui = nil
        self.scroll = nil
    end
    
    self:_showOriginal()
end

return BetterLeaderboard
