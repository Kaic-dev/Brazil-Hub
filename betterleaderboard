-- betterleaderboard.lua
-- Handler OOP para criar um leaderboard customizado
-- Uso: local BetterLeaderboard = require(path); local leaderboard = BetterLeaderboard.new(); leaderboard:enable()/leaderboard:disable()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Carrega o mÃ³dulo Utils com tratamento de erro
local Utils, utils
local success, err = pcall(function()
    Utils = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/refs/heads/main/Utils"))()
    utils = Utils.new()
end)

if not success then
    warn("Falha ao carregar Utils: " .. tostring(err))
    -- Criar um utils mock para evitar erros
    utils = {
        getPlayerPrestigeData = function(self, player)
            return {level = 0}
        end,
        getPlayerRogueDisplay = function(self, player)
            return player.Name
        end
    }
end

-- Cache de cores para evitar criar novos objetos
local COLORS = {
    WHITE = Color3.new(1, 1, 1),
    GRAY = Color3.new(0.592156, 0.560784, 0.560784),
    BLACK = Color3.new(0, 0, 0),
    YELLOW = Color3.new(0.847058, 0.690196, 0.250980),
    BLUE = Color3.fromRGB(80, 180, 255)
}

local ConnectionManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kaic-dev/Brazil-Hub/main/ConnectionManager"))()

local BetterLeaderboard = {}
BetterLeaderboard.__index = BetterLeaderboard

function BetterLeaderboard.new()
    local self = setmetatable({}, BetterLeaderboard)
    self.enabled = false
    self._connMgr = ConnectionManager.new()
    self._frameConnMgrs = {} -- [key] = ConnectionManager para cada frame
    self.originalLeaderboardGui = nil
    self.customLeaderboardGui = nil
    self.updateScheduled = false
    self.currentCameraTarget = nil
    self.originalCameraSubject = nil
    self.playerFrames = {}
    self.lastColorUpdate = 0
    self.colorUpdateInterval = 1
    self.scrollingFrame = nil
    return self
end

function BetterLeaderboard:getPlayerGui()
    local player = Players.LocalPlayer
    if not player then 
        return nil 
    end
    
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if not playerGui then
        local success, result = pcall(function()
            return player:WaitForChild("PlayerGui", 5)
        end)
        if success then
            playerGui = result
        end
    end
    
    return playerGui
end

function BetterLeaderboard:findOriginalLeaderboardGui()
    local playerGui = self:getPlayerGui()
    if not playerGui then return nil end
    
    return playerGui:FindFirstChild("LeaderboardGui")
end

function BetterLeaderboard:isCustomLeaderboardValid()
    return self.customLeaderboardGui and 
           self.customLeaderboardGui.Parent and 
           self.customLeaderboardGui:FindFirstChild("Leaderboard") and 
           self.customLeaderboardGui.Leaderboard:FindFirstChild("ScrollingFrame")
end

function BetterLeaderboard:scheduleUpdate()
    if self.updateScheduled then return end
    self.updateScheduled = true
    task.spawn(function()
        task.wait(0.1)
        if self.enabled then
            self:updatePlayerList()
        end
        self.updateScheduled = false
    end)
end

function BetterLeaderboard:switchCameraToPlayer(player)
    local camera = workspace.CurrentCamera
    if not camera or not player or not player.Parent then 
        return 
    end
    
    if self.currentCameraTarget == player then
        self:resetCameraToLocalPlayer()
        return
    end
    
    if not self.originalCameraSubject then
        self.originalCameraSubject = camera.CameraSubject
    end
    
    if not player.Character then 
        return 
    end
    
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if not humanoid then 
        return 
    end
    
    self.currentCameraTarget = player
    camera.CameraSubject = humanoid
end

function BetterLeaderboard:resetCameraToLocalPlayer()
    local camera = workspace.CurrentCamera
    if not camera then return end
    
    if self.originalCameraSubject and self.originalCameraSubject.Parent then
        camera.CameraSubject = self.originalCameraSubject
    else
        local localPlayer = Players.LocalPlayer
        if localPlayer and localPlayer.Character then
            local humanoid = localPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                camera.CameraSubject = humanoid
            end
        end
    end
    
    self.currentCameraTarget = nil
end

function BetterLeaderboard:createCustomLeaderboard()
    local playerGui = self:getPlayerGui()
    if not playerGui then
        return nil, nil
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BetterLeaderboardGui"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local leaderboardButton = Instance.new("ImageButton")
    leaderboardButton.Name = "Leaderboard"
    leaderboardButton.ScaleType = Enum.ScaleType.Slice
    leaderboardButton.ImageTransparency = 0.8
    leaderboardButton.Size = UDim2.new(0.05, 150, 0, 240)
    leaderboardButton.AnchorPoint = Vector2.new(1, 0)
    leaderboardButton.Image = "rbxassetid://1327087642"
    leaderboardButton.BackgroundTransparency = 1
    leaderboardButton.Position = UDim2.new(1, 0, 0, 0)
    leaderboardButton.BackgroundColor3 = COLORS.WHITE
    leaderboardButton.BorderSizePixel = 0
    leaderboardButton.SliceCenter = Rect.new(Vector2.new(20, 20), Vector2.new(190, 190))

    local scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.ScrollBarImageColor3 = COLORS.GREEN
    scrollingFrame.MidImage = "rbxassetid://3515608813"
    scrollingFrame.Active = true
    scrollingFrame.ScrollBarThickness = 10
    scrollingFrame.BackgroundTransparency = 1
    scrollingFrame.BackgroundColor3 = COLORS.WHITE
    scrollingFrame.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
    scrollingFrame.Position = UDim2.new(-0.07, 0, 0.04, 0)
    scrollingFrame.TopImage = "rbxassetid://3515609176"
    scrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    scrollingFrame.Size = UDim2.new(1.05, -10, 1, -20)
    scrollingFrame.BottomImage = "rbxassetid://3515608177"
    scrollingFrame.BorderSizePixel = 0
    scrollingFrame.CanvasSize = UDim2.new(0, 0,0, 330)
    scrollingFrame.Name = "ScrollingFrame"

    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 2)
    
    -- Parent elements in correct order
    listLayout.Parent = scrollingFrame
    scrollingFrame.Parent = leaderboardButton
    leaderboardButton.Parent = screenGui
    screenGui.Parent = playerGui

    -- Update canvas size when content changes
    local function updateCanvasSize()
        if scrollingFrame and scrollingFrame.Parent then
            local contentHeight = listLayout.AbsoluteContentSize.Y
            scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, contentHeight + 4) -- 4px extra para garantir o scroll
        end
    end
    local canvasConnection = listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvasSize)
    self._connMgr:add(canvasConnection)
    -- Chama uma vez ao criar
    updateCanvasSize()
    
    self.scrollingFrame = scrollingFrame
    self.customLeaderboardGui = screenGui
    
    return screenGui, scrollingFrame
end

function BetterLeaderboard:createPlayerFrame(player)
    if not player or not player.Parent then 
        return nil
    end
    
    local frame = Instance.new("Frame")
    frame.BackgroundTransparency = 1
    frame.BorderColor3 = COLORS.BLACK
    frame.SizeConstraint = Enum.SizeConstraint.RelativeXX
    frame.Size = UDim2.new(1, 0, 0, 25)
    frame.BorderSizePixel = 0
    frame.BackgroundColor3 = COLORS.WHITE

    local hasCharacter = player.Character ~= nil
    local textColor = hasCharacter and COLORS.WHITE or COLORS.GRAY

    local prestigeData = utils:getPlayerPrestigeData(player)
    local prestigeLevel = prestigeData.level or 0

    local prestigeButton = Instance.new("TextButton")
    prestigeButton.Font = Enum.Font.SourceSansSemibold
    prestigeButton.TextColor3 = textColor
    prestigeButton.TextTransparency = 0.2
    prestigeButton.Text = "#" .. prestigeLevel
    prestigeButton.TextStrokeTransparency = 0.5
    prestigeButton.Size = UDim2.new(0, 35, 1, 0)
    prestigeButton.BackgroundTransparency = 1
    prestigeButton.TextXAlignment = Enum.TextXAlignment.Left
    prestigeButton.Name = "Prestige"
    prestigeButton.TextSize = 16
    prestigeButton.BorderSizePixel = 0
    prestigeButton.Visible = prestigeLevel > 0

    local playerLabel = Instance.new("TextButton")
    playerLabel.Font = Enum.Font.SourceSansSemibold
    playerLabel.TextColor3 = textColor
    playerLabel.BorderColor3 = COLORS.BLACK
    playerLabel.Text = utils:getPlayerRogueDisplay(player) or player.Name
    playerLabel.TextXAlignment = Enum.TextXAlignment.Left
    playerLabel.TextStrokeTransparency = 0.5
    playerLabel.Size = UDim2.new(1, -35, 1, 0)
    playerLabel.BackgroundTransparency = 1
    playerLabel.Position = UDim2.new(0, 35, 0, 0)
    playerLabel.TextSize = 18
    playerLabel.Name = "PlayerLabel"
    playerLabel.BorderSizePixel = 0
    playerLabel.TextTruncate = Enum.TextTruncate.AtEnd

    -- Parent elements
    prestigeButton.Parent = frame
    playerLabel.Parent = frame

    -- Connect click events - store connections simply
    local connectionKey = "player_" .. player.UserId
    self._frameConnMgrs[connectionKey] = ConnectionManager.new()
    
    self._frameConnMgrs[connectionKey]:add(playerLabel.MouseButton1Click:Connect(function()
        if self.enabled and hasCharacter and player.Parent then
            self:switchCameraToPlayer(player)
        end
    end))
    
    return frame
end

function BetterLeaderboard:cleanupFrameConnections()
    for key, mgr in pairs(self._frameConnMgrs) do
        if mgr then
            mgr:disconnectAll()
            self._frameConnMgrs[key] = nil
        end
    end
    self._frameConnMgrs = {}
end

function BetterLeaderboard:updatePlayerList()
    if not self:isCustomLeaderboardValid() then 
        return 
    end
    
    local scrollingFrame = self.scrollingFrame
    if not scrollingFrame or not scrollingFrame.Parent then 
        return 
    end
    
    -- Clean up existing frames and connections
    self:cleanupFrameConnections()
    
    for player, frame in pairs(self.playerFrames) do
        if frame and frame.Parent then
            frame:Destroy()
        end
    end
    self.playerFrames = {}
    
    -- Create frames for all players
    local playerList = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player and player.Parent then
            table.insert(playerList, player)
        end
    end
    
    -- Sort players by prestige level (highest first)
    table.sort(playerList, function(a, b)
        local prestigeA = utils:getPlayerPrestigeData(a).level or 0
        local prestigeB = utils:getPlayerPrestigeData(b).level or 0
        if prestigeA == prestigeB then
            return a.Name < b.Name
        end
        return prestigeA > prestigeB
    end)
    
    -- Create frames in order
    for i, player in ipairs(playerList) do
        local frame = self:createPlayerFrame(player)
        if frame then
            frame.LayoutOrder = i
            frame.Parent = scrollingFrame
            self.playerFrames[player] = frame
        end
    end
end

function BetterLeaderboard:updatePlayerColors()
    local currentTime = tick()
    if currentTime - self.lastColorUpdate < self.colorUpdateInterval then return end
    self.lastColorUpdate = currentTime
    
    for player, frame in pairs(self.playerFrames) do
        if frame and frame.Parent and player and player.Parent then
            local hasCharacter = player.Character ~= nil
            local isObserved = (self.currentCameraTarget == player)
            local playerLabel = frame:FindFirstChild("PlayerLabel")
            local prestigeButton = frame:FindFirstChild("Prestige")

            -- Cor: azul se observado, branco se tem personagem, cinza se nÃ£o tem
            local textColor = isObserved and COLORS.BLUE or (hasCharacter and COLORS.WHITE or COLORS.GRAY)

            if playerLabel then
                playerLabel.TextColor3 = textColor
                playerLabel.Active = hasCharacter -- SÃ³ clicÃ¡vel se tem personagem
                playerLabel.AutoButtonColor = hasCharacter -- Efeito hover sÃ³ se clicÃ¡vel
                playerLabel.TextTransparency = hasCharacter and 0.2 or 0.5
            end
            if prestigeButton then
                prestigeButton.TextColor3 = textColor
            end
        end
    end
end

function BetterLeaderboard:connectPlayerEvents()
    self._connMgr:disconnectAll()
    
    self._connMgr:add(Players.PlayerAdded:Connect(function(player)
        task.wait(0.1)
        self:scheduleUpdate()
    end))
    
    self._connMgr:add(Players.PlayerRemoving:Connect(function(player)
        if self.currentCameraTarget == player then
            self:resetCameraToLocalPlayer()
        end
        local connectionKey = "player_" .. player.UserId
        if self._frameConnMgrs[connectionKey] then
            self._frameConnMgrs[connectionKey]:disconnectAll()
            self._frameConnMgrs[connectionKey] = nil
        end
        if self.playerFrames[player] then
            self.playerFrames[player] = nil
        end
        self:scheduleUpdate()
    end))
    
    for _, player in pairs(Players:GetPlayers()) do
        if player and player.Parent then
            local characterAddedKey = "charAdded_" .. player.UserId
            local characterRemovingKey = "charRemoving_" .. player.UserId
            self._connMgr:add(player.CharacterAdded:Connect(function()
                task.wait(0.1)
                self:scheduleUpdate()
            end))
            self._connMgr:add(player.CharacterRemoving:Connect(function()
                if self.currentCameraTarget == player then
                    self:resetCameraToLocalPlayer()
                end
                self:scheduleUpdate()
            end))
        end
    end
    
    self._connMgr:add(RunService.Heartbeat:Connect(function()
        if self.enabled then
            self:updatePlayerColors()
        end
    end))
end

function BetterLeaderboard:hideOriginalLeaderboard()
    self.originalLeaderboardGui = self:findOriginalLeaderboardGui()
    if self.originalLeaderboardGui then
        self.originalLeaderboardGui.Enabled = false
    end
end

function BetterLeaderboard:showOriginalLeaderboard()
    if self.originalLeaderboardGui and self.originalLeaderboardGui.Parent then
        self.originalLeaderboardGui.Enabled = true
    end
end

function BetterLeaderboard:enable()
    if self.enabled then return end
    
    self.enabled = true
    
    -- Hide original leaderboard
    self:hideOriginalLeaderboard()
    
    -- Create custom leaderboard
    local success, err = pcall(function()
        self.customLeaderboardGui, self.scrollingFrame = self:createCustomLeaderboard()
    end)
    
    if not success or not self.customLeaderboardGui then
        self.enabled = false
        return
    end
    
    -- Connect events
    self:connectPlayerEvents()
    
    -- Initial update
    self:scheduleUpdate()
    
    print("BetterLeaderboard enabled")
end

function BetterLeaderboard:disable()
    if not self.enabled then return end
    
    self.enabled = false
    
    self._connMgr:disconnectAll()
    self:cleanupFrameConnections()
    self:resetCameraToLocalPlayer()
    for player, frame in pairs(self.playerFrames) do
        if frame and frame.Parent then
            frame:Destroy()
        end
    end
    self.playerFrames = {}
    if self.customLeaderboardGui and self.customLeaderboardGui.Parent then
        self.customLeaderboardGui:Destroy()
    end
    self.customLeaderboardGui = nil
    self.scrollingFrame = nil
    self:showOriginalLeaderboard()
    print("BetterLeaderboard disabled")
end

function BetterLeaderboard:toggle()
    if self.enabled then
        self:disable()
    else
        self:enable()
    end
end

function BetterLeaderboard:destroy()
    self:disable()
end

return BetterLeaderboard
