local Leaderboard = {}
Leaderboard.__index = Leaderboard

-- Services
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera

-- Utility: Generates the RogueName string based on player attributes
local function getRogueName(player)
    -- Default values for missing attributes
    local firstName = tostring(player:GetAttribute("FirstName") or "Unknown")
    local lastName = tostring(player:GetAttribute("LastName") or "Unknown")
    local houseRank = tostring(player:GetAttribute("HouseRank") or "")

    -- Determine the formatted name based on house rank
    if houseRank == "Owner" then
        return string.format("Lord %s %s", firstName, lastName)
    elseif houseRank == "Member" then
        return string.format("%s %s", firstName, lastName)
    elseif houseRank == "" then
        return firstName
    end

    -- Fallback for undefined house ranks
    return string.format("[RogueName: %s %s]", firstName, lastName)
end


-- Constructor
function Leaderboard.new()
    local self = setmetatable({}, Leaderboard)

    -- GUI Elements
    self.leaderboardGui = self:createLeaderboardGui()
    self.scrollingFrame = self.leaderboardGui:FindFirstChild("LeaderboardScrollingFrame", true)

    -- State
    self.isActive = true -- Start with custom leaderboard active

    -- Observed Player
    self.observedPlayer = nil

    -- Initialize
    self:rebuildLeaderboard()
    self:toggleNativeLeaderboard(false) -- Disable native leaderboard

    -- Event Listeners
    Players.PlayerAdded:Connect(function()
        self:rebuildLeaderboard()
    end)
    Players.PlayerRemoving:Connect(function()
        self:rebuildLeaderboard()
    end)

    return self
end

function Leaderboard:toggleNativeLeaderboard(state)
    local playerGui = Players.LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return end

    local nativeLeaderboard = playerGui:FindFirstChild("LeaderboardGui")
    if nativeLeaderboard then
        nativeLeaderboard.Enabled = state
    end
end

function Leaderboard:toggleLeaderboard()
    self.isActive = not self.isActive -- Toggle the state

    if self.isActive then
        -- Activate custom leaderboard
        self.leaderboardGui.Enabled = true
        self:toggleNativeLeaderboard(false) -- Disable native leaderboard
        print("[DEBUG] Custom leaderboard activated.")
    else
        -- Deactivate custom leaderboard
        self.leaderboardGui.Enabled = false
        self:toggleNativeLeaderboard(true) -- Enable native leaderboard
        print("[DEBUG] Custom leaderboard deactivated.")
    end
end



-- Method: Create the Leaderboard GUI
function Leaderboard:createLeaderboardGui()
    local leaderboardGui = Instance.new("ScreenGui")
    leaderboardGui.Name = "SuperLeaderBoard"
    leaderboardGui.ResetOnSpawn = false
    leaderboardGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

    local imageButton = Instance.new("ImageButton")
    imageButton.Name = "LeaderboardButton"
    imageButton.AnchorPoint = Vector2.new(1, 0)
    imageButton.BackgroundTransparency = 1
    imageButton.Position = UDim2.new(1, 0, 0, 0)
    imageButton.Size = UDim2.new(0.05, 150, 0, 240)
    imageButton.Image = "rbxassetid://1327087642"
    imageButton.ImageTransparency = 0.8
    imageButton.Parent = leaderboardGui

    local scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.Name = "LeaderboardScrollingFrame"
    scrollingFrame.BackgroundTransparency = 1
    scrollingFrame.Position = UDim2.new(0, 15, 0, 10)
    scrollingFrame.Size = UDim2.new(1, -30, 1, 20)
    scrollingFrame.BottomImage = "rbxassetid://3515608177"
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 220)
    scrollingFrame.MidImage = "rbxassetid://3515608813"
    scrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(245, 197, 130)
    scrollingFrame.ScrollBarThickness = 10
    scrollingFrame.TopImage = "rbxassetid://3515609176"
    scrollingFrame.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
    scrollingFrame.Parent = imageButton

    return leaderboardGui
end

-- Method: Rebuild Leaderboard
function Leaderboard:rebuildLeaderboard()
    -- Clear existing labels
    for _, child in ipairs(self.scrollingFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end

    -- Get players and sort by name
    local players = Players:GetPlayers()
    table.sort(players, function(a, b)
        return a.Name:lower() < b.Name:lower()
    end)

    -- Create labels
    for index, player in ipairs(players) do
        self:createPlayerLabel(player, index)
    end

    -- Update canvas size
    self.scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #players * 20)

    -- Update observed player appearance
    if self.observedPlayer then
        local observedLabel = self.scrollingFrame:FindFirstChild(self.observedPlayer.Name .. "_Label")
        if observedLabel then
            self:updatePlayerLabelAppearance()
        else
            self.observedPlayer = nil
        end
    end
end

-- Method: Create Player Label
function Leaderboard:createPlayerLabel(player, index)
    local playerLabel = Instance.new("TextButton")
    playerLabel.Name = player.Name .. "_Label"
    playerLabel.BackgroundTransparency = 1
    playerLabel.Position = UDim2.new(0, 0, 0, (index - 1) * 20)
    playerLabel.Size = UDim2.new(1, 0, 0, 20)
    playerLabel.Text = getRogueName(player)
    playerLabel.TextSize = 18
    playerLabel.Font = Enum.Font.SourceSansBold
    playerLabel.TextStrokeTransparency = 0.2
    playerLabel.TextXAlignment = Enum.TextXAlignment.Left
    playerLabel.Parent = self.scrollingFrame

    -- Update appearance
    self:updatePlayerLabelAppearance()

    -- Event: Mouse hover effects
    playerLabel.MouseEnter:Connect(function()
        playerLabel.TextTransparency = 0.3
        playerLabel.Text = player.Name
    end)
    playerLabel.MouseLeave:Connect(function()
        playerLabel.TextTransparency = player.Character and 0 or 0.3
        playerLabel.Text = self:getRogueName(player)
    end)

    -- Event: Spectate functionality
    playerLabel.MouseButton2Click:Connect(function()
        self:toggleSpectate(player, playerLabel)
    end)
end

-- Update all player label appearances
function Leaderboard:updatePlayerLabelAppearance()
    -- Itera por todos os jogadores
    for _, player in ipairs(Players:GetPlayers()) do
        -- Localiza o rótulo correspondente no leaderboard
        local label = self.scrollingFrame:FindFirstChild(player.Name .. "_Label")
        
        -- Ignora se o rótulo não for encontrado
        if not label then
            warn(string.format("[DEBUG] Label for %s not found", player.Name))
            continue
        end

        -- VARIABLES
        local isMaxEdict = player:GetAttribute("MaxEdict") or false
        local characterExists = player.Character ~= nil
        local backpack = player:FindFirstChild("Backpack")
        local hasObserve = backpack and backpack:FindFirstChild("Observe")
        local isGreaterNavaran = backpack and backpack:FindFirstChild("Jack")

        -- Update label transparency based on character existence
        label.TextTransparency = characterExists and 0 or 0.3

        -- FUNCTION: Determine text color based on player attributes
        local function getTextColor()
            if self.observedPlayer == player then
                return Color3.fromRGB(236, 218, 16) -- Gold
            elseif isMaxEdict then
                return Color3.fromRGB(255, 165, 0) -- Orange
            elseif hasObserve then
                return Color3.fromRGB(255, 0, 0) -- Red
            elseif isGreaterNavaran then
                return Color3.fromRGB(75, 0, 130) -- Purple
            else
                return Color3.fromRGB(255, 255, 255) -- White (default)
            end
        end

        -- Determine the new color
        local newColor = getTextColor()

        -- Check if the label's color is already the same
        if label.TextColor3 ~= newColor then
            -- Apply the new color
            label.TextColor3 = newColor
            print(string.format("[DEBUG] Updated label for %s with color: %s", player.Name, tostring(newColor)))

            -- Play sounds only if the color changes
            if newColor == Color3.fromRGB(255, 0, 0) then -- Red (hasObserve)
                print("[DEBUG] Playing observe sound for:", player.Name)
                SoundManager:playSound(OBSERVE_SOUND_ID)
            elseif newColor == Color3.fromRGB(75, 0, 130) then -- Purple (isGreaterNavaran)
                print("[DEBUG] Playing greater navaran sound for:", player.Name)
                SoundManager:playSound(MOD_SOUND_ID)
            end
        else
            print(string.format("[DEBUG] No color change for %s. Skipping sound.", player.Name))
        end
    end
end

-- Method: Toggle Spectate
function Leaderboard:toggleSpectate(player, label)
    if self.observedPlayer == player then
        -- Stop spectating
        self.observedPlayer = nil
        Camera.CameraType = Enum.CameraType.Custom
        Camera.CameraSubject = Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    else
        -- Start spectating
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            self.observedPlayer = player
            Camera.CameraType = Enum.CameraType.Follow
            Camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
        else
            warn(string.format("Cannot spectate %s: Character or Humanoid not found.", player.Name))
        end
    end
    self:updatePlayerLabelAppearance()
end

return Leaderboard
