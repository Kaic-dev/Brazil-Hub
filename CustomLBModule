-- ModuleScript: SuperLeaderboardModule
local SuperLeaderboard = {}
SuperLeaderboard.__index = SuperLeaderboard

-- SERVICES
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera

-- CONSTANTS
local IMAGE_SIZE = UDim2.new(0.05, 150, 0, 240)
local IMAGE_POSITION = UDim2.new(1, -10, 0, 10)
local IMAGE_ASSET = "rbxassetid://1327087642"
local SCROLLING_FRAME_SIZE = UDim2.new(1, -30, 1, -50)
local SCROLLING_FRAME_POSITION = UDim2.new(0, 15, 0, 50)

local COLORS = {
	default = Color3.fromRGB(255, 255, 255),
	max_edict = Color3.fromRGB(255, 165, 0),
	observed = Color3.fromRGB(236, 218, 16),
	has_observe = Color3.fromRGB(255, 0, 0),
	greater_navaran = Color3.fromRGB(75, 0, 130),
}

local SOUND_MANAGER_URL = "https://raw.githubusercontent.com/Kaic-dev/PocoyoHub/refs/heads/main/soundModule"
local OBSERVE_SOUND_ID = "rbxassetid://138081500"
local MOD_SOUND_ID = "rbxassetid://9113085764"

-- IMPORTS
-- Load SoundManager Module
local function loadSoundManager()
	local success, result = pcall(function()
		return game:HttpGet(SOUND_MANAGER_URL)
	end)

	if not success then
		error("Failed to load SoundManager module: " .. (result or "Unknown error"))
	end

	local moduleFunction, loadError = loadstring(result)
	if not moduleFunction then
		error("Error parsing SoundManager module: " .. (loadError or "Unknown error"))
	end

	return moduleFunction()
end

local SoundManager = loadSoundManager()

-- CLASS CONSTRUCTOR
function SuperLeaderboard.new()
	local self = setmetatable({}, SuperLeaderboard)
	self.gui = nil
	self.scrollingFrame = nil
	self.observedPlayer = nil
	self.enabled = true
	self.connections = {}

	self:initializeUI()
	print("[DEBUG] SuperLeaderboard initialized.")
	return self
end

-- UI INITIALIZATION
function SuperLeaderboard:initializeUI()
	self.gui, self.scrollingFrame = self:createLeaderboardUI()
	self:initializePlayers()
	self:rebuildLeaderboard()
end

function SuperLeaderboard:createLeaderboardUI()
	local leaderboardGui = Instance.new("ScreenGui")
	leaderboardGui.Name = "SuperLeaderBoard"
	leaderboardGui.ResetOnSpawn = false
	leaderboardGui.Enabled = true
	leaderboardGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

	local leaderboardImage = Instance.new("ImageLabel")
	leaderboardImage.Name = "LeaderboardImage"
	leaderboardImage.AnchorPoint = Vector2.new(1, 0)
	leaderboardImage.BackgroundTransparency = 1
	leaderboardImage.Position = IMAGE_POSITION
	leaderboardImage.Size = IMAGE_SIZE
	leaderboardImage.Image = IMAGE_ASSET
	leaderboardImage.ImageTransparency = 0.8
	leaderboardImage.Parent = leaderboardGui

	local scrollingFrame = Instance.new("ScrollingFrame")
	scrollingFrame.Name = "LeaderboardScrollingFrame"
	scrollingFrame.BackgroundTransparency = 1
	scrollingFrame.Position = SCROLLING_FRAME_POSITION
	scrollingFrame.Size = SCROLLING_FRAME_SIZE
	scrollingFrame.BottomImage = "rbxassetid://3515608177"
	scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 220)
	scrollingFrame.MidImage = "rbxassetid://3515608813"
	scrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(245, 197, 130)
	scrollingFrame.ScrollBarThickness = 10
	scrollingFrame.TopImage = "rbxassetid://3515609176"
	scrollingFrame.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
	scrollingFrame.Visible = true
	scrollingFrame.Parent = leaderboardImage

	return leaderboardGui, scrollingFrame
end

-- PLAYER MANAGEMENT
function SuperLeaderboard:initializePlayers()
	for _, player in ipairs(Players:GetPlayers()) do
		self:handlePlayer(player)
	end

	Players.PlayerAdded:Connect(function(player)
		self:handlePlayer(player)
	end)

	Players.PlayerRemoving:Connect(function(player)
		self:cleanupPlayer(player)
	end)
end

function SuperLeaderboard:handlePlayer(player)
	self:cleanupConnections(player)

	-- Create or update leaderboard entry
	self:rebuildLeaderboard()

	local connections = {}
	connections.characterAdded = player.CharacterAdded:Connect(function()
		self:updateLeaderboardEntry(player)
	end)

	connections.characterRemoving = player.CharacterRemoving:Connect(function()
		self:updateLeaderboardEntry(player)
	end)

	self.connections[player] = connections
end

function SuperLeaderboard:cleanupPlayer(player)
	self:cleanupConnections(player)
	self:rebuildLeaderboard()
end

function SuperLeaderboard:cleanupConnections(player)
	if self.connections[player] then
		for _, connection in pairs(self.connections[player]) do
			connection:Disconnect()
		end
		self.connections[player] = nil
	end
end

-- LEADERBOARD MANAGEMENT
function SuperLeaderboard:rebuildLeaderboard()
	for _, child in ipairs(self.scrollingFrame:GetChildren()) do
		if child:IsA("TextButton") then
			child:Destroy()
		end
	end

	local players = Players:GetPlayers()
	table.sort(players, function(a, b)
		return a.Name:lower() < b.Name:lower()
	end)

	for index, player in ipairs(players) do
		self:createLeaderboardEntry(player, index)
	end

	self.scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #players * 30)
end

function SuperLeaderboard:createLeaderboardEntry(player, index)
	local label = Instance.new("TextButton")
	label.Name = player.Name .. "_Label"
	label.Text = self:getRogueName(player)
	label.TextSize = 18
	label.Font = Enum.Font.SourceSansBold
	label.BackgroundTransparency = 1
	label.Position = UDim2.new(0, 0, 0, (index - 1) * 30)
	label.Size = UDim2.new(1, 0, 0, 30)
	label.TextColor3 = COLORS.default
	label.TextTransparency = player.Character and 0 or 0.7
	label.Parent = self.scrollingFrame

	self:updatePlayerAppearance(player, label)
end

function SuperLeaderboard:updatePlayerAppearance(player, label)
	local color = COLORS.default

	if self.observedPlayer == player then
		color = COLORS.observed
	elseif player:GetAttribute("MaxEdict") then
		color = COLORS.max_edict
	elseif player.Backpack and player.Backpack:FindFirstChild("Observe") then
		color = COLORS.has_observe
	elseif player.Backpack and player.Backpack:FindFirstChild("Jack") then
		color = COLORS.greater_navaran
	end

	if label.TextColor3 ~= color then
		label.TextColor3 = color

		if color == COLORS.has_observe then
			SoundManager:playSound(OBSERVE_SOUND_ID)
		elseif color == COLORS.greater_navaran then
			SoundManager:playSound(MOD_SOUND_ID)
		end
	end

	label.TextTransparency = player.Character and player.Character.Parent and 0 or 0.3
end

-- UTILITIES
function SuperLeaderboard:getRogueName(player)
	local firstName = player:GetAttribute("FirstName") or "Unknown"
	local lastName = player:GetAttribute("LastName") or "Unknown"
	local houseRank = player:GetAttribute("HouseRank") or ""

	if houseRank == "Owner" then
		return string.format("Lord %s %s", firstName, lastName)
	elseif houseRank == "Member" then
		return string.format("%s %s", firstName, lastName)
	elseif houseRank == "" then
		return firstName
	end

	return "[RogueName]"
end

return SuperLeaderboard
